
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.57+148 (git sha1 259bd6fb3, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)

-- Executing script file `synthesis_picorv32.ys' --

1. Executing Liberty frontend: /home/ank/.ciel/ciel/sky130/versions/a80ed405766c5d4f21c8bfca84552a7478fe75b2/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: src/picorv32.v
Parsing Verilog input from `src/picorv32.v' to AST representation.
Generating RTLIL representation for module `\picorv32'.
Generating RTLIL representation for module `\picorv32_regs'.
Generating RTLIL representation for module `\picorv32_pcpi_mul'.
Generating RTLIL representation for module `\picorv32_pcpi_fast_mul'.
Generating RTLIL representation for module `\picorv32_pcpi_div'.
Generating RTLIL representation for module `\picorv32_axi'.
Generating RTLIL representation for module `\picorv32_axi_adapter'.
Generating RTLIL representation for module `\picorv32_wb'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \picorv32

3.1.2. Analyzing design hierarchy..
Top module:  \picorv32
Removing unused module `\picorv32_wb'.
Removing unused module `\picorv32_axi_adapter'.
Removing unused module `\picorv32_axi'.
Removing unused module `\picorv32_pcpi_div'.
Removing unused module `\picorv32_pcpi_fast_mul'.
Removing unused module `\picorv32_pcpi_mul'.
Removing unused module `\picorv32_regs'.
Removed 7 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\picorv32.$proc$src/picorv32.v:206$688'.
Removing empty process `picorv32.$proc$src/picorv32.v:206$688'.
Found and cleaned up 17 empty switches in `\picorv32.$proc$src/picorv32.v:1402$509'.
Found and cleaned up 1 empty switch in `\picorv32.$proc$src/picorv32.v:1348$493'.
Found and cleaned up 6 empty switches in `\picorv32.$proc$src/picorv32.v:546$129'.
Removing empty process `picorv32.$proc$src/picorv32.v:546$129'.
Cleaned up 25 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 34 switch rules as full_case in process $proc$src/picorv32.v:1402$509 in module picorv32.
Marked 1 switch rules as full_case in process $proc$src/picorv32.v:1337$484 in module picorv32.
Marked 2 switch rules as full_case in process $proc$src/picorv32.v:1309$472 in module picorv32.
Marked 2 switch rules as full_case in process $proc$src/picorv32.v:1295$467 in module picorv32.
Marked 8 switch rules as full_case in process $proc$src/picorv32.v:1186$432 in module picorv32.
Marked 3 switch rules as full_case in process $proc$src/picorv32.v:858$169 in module picorv32.
Marked 3 switch rules as full_case in process $proc$src/picorv32.v:809$167 in module picorv32.
Marked 2 switch rules as full_case in process $proc$src/picorv32.v:778$163 in module picorv32.
Marked 48 switch rules as full_case in process $proc$src/picorv32.v:701$162 in module picorv32.
Marked 4 switch rules as full_case in process $proc$src/picorv32.v:565$138 in module picorv32.
Marked 1 switch rules as full_case in process $proc$src/picorv32.v:430$100 in module picorv32.
Removed 2 dead cases from process $proc$src/picorv32.v:401$97 in module picorv32.
Marked 2 switch rules as full_case in process $proc$src/picorv32.v:401$97 in module picorv32.
Marked 1 switch rules as full_case in process $proc$src/picorv32.v:390$92 in module picorv32.
Marked 1 switch rules as full_case in process $proc$src/picorv32.v:325$18 in module picorv32.
Removed a total of 2 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 57 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~187 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1402$509'.
     1/78: $17\next_irq_pending[2:2]
     2/78: $16\next_irq_pending[2:2]
     3/78: $15\next_irq_pending[2:2]
     4/78: $14\next_irq_pending[2:2]
     5/78: $13\next_irq_pending[2:2]
     6/78: $12\next_irq_pending[2:2]
     7/78: $11\next_irq_pending[2:2]
     8/78: $2\next_irq_pending[31:0] [31:2]
     9/78: $3\set_mem_do_rdata[0:0]
    10/78: $2\next_irq_pending[31:0] [1]
    11/78: $3\set_mem_do_wdata[0:0]
    12/78: $2\next_irq_pending[31:0] [0]
    13/78: $4\set_mem_do_rinst[0:0]
    14/78: $3\set_mem_do_rinst[0:0]
    15/78: $4\set_mem_do_wdata[0:0]
    16/78: $9\next_irq_pending[1:1]
    17/78: $8\next_irq_pending[1:1]
    18/78: $7\next_irq_pending[1:1]
    19/78: $4\set_mem_do_rdata[0:0]
    20/78: $5\next_irq_pending[1:1]
    21/78: $4\next_irq_pending[1:1]
    22/78: $10\next_irq_pending[1:1]
    23/78: $5\set_mem_do_rinst[0:0]
    24/78: $6\next_irq_pending[1:1]
    25/78: $3\next_irq_pending[31:0]
    26/78: $3\current_pc[31:0]
    27/78: $2\current_pc[31:0]
    28/78: $2\set_mem_do_wdata[0:0]
    29/78: $2\set_mem_do_rdata[0:0]
    30/78: $2\set_mem_do_rinst[0:0]
    31/78: $1\next_irq_pending[31:0]
    32/78: $1\current_pc[31:0]
    33/78: $1\set_mem_do_wdata[0:0]
    34/78: $1\set_mem_do_rdata[0:0]
    35/78: $1\set_mem_do_rinst[0:0]
    36/78: $0\trace_data[35:0]
    37/78: $0\count_cycle[63:0]
    38/78: $0\trace_valid[0:0]
    39/78: $0\do_waitirq[0:0]
    40/78: $0\decoder_pseudo_trigger[0:0]
    41/78: $0\decoder_trigger[0:0]
    42/78: $0\alu_wait_2[0:0]
    43/78: $0\alu_wait[0:0]
    44/78: $0\reg_out[31:0]
    45/78: $0\reg_sh[4:0]
    46/78: $0\trap[0:0]
    47/78: $0\pcpi_timeout[0:0]
    48/78: $0\latched_rd[4:0]
    49/78: $0\latched_is_lb[0:0]
    50/78: $0\latched_is_lh[0:0]
    51/78: $0\latched_is_lu[0:0]
    52/78: $0\latched_trace[0:0]
    53/78: $0\latched_compr[0:0]
    54/78: $0\latched_branch[0:0]
    55/78: $0\latched_stalu[0:0]
    56/78: $0\latched_store[0:0]
    57/78: $0\irq_state[1:0]
    58/78: $0\cpu_state[7:0]
    59/78: $0\dbg_rs2val_valid[0:0]
    60/78: $0\dbg_rs1val_valid[0:0]
    61/78: $0\dbg_rs2val[31:0]
    62/78: $0\dbg_rs1val[31:0]
    63/78: $0\mem_do_wdata[0:0]
    64/78: $0\mem_do_rdata[0:0]
    65/78: $0\mem_do_rinst[0:0]
    66/78: $0\mem_do_prefetch[0:0]
    67/78: $0\mem_wordsize[1:0]
    68/78: $0\timer[31:0]
    69/78: $0\irq_mask[31:0]
    70/78: $0\irq_active[0:0]
    71/78: $0\irq_delay[0:0]
    72/78: $0\reg_op2[31:0]
    73/78: $0\reg_op1[31:0]
    74/78: $0\reg_next_pc[31:0]
    75/78: $0\reg_pc[31:0]
    76/78: $0\count_instr[63:0]
    77/78: $0\eoi[31:0]
    78/78: $0\pcpi_valid[0:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1348$493'.
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1337$484'.
     1/3: $1$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$492
     2/3: $1$memwr$\cpuregs$src/picorv32.v:1344$17_DATA[31:0]$491
     3/3: $1$memwr$\cpuregs$src/picorv32.v:1344$17_ADDR[4:0]$490
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1309$472'.
     1/4: $2\cpuregs_write[0:0]
     2/4: $2\cpuregs_wrdata[31:0]
     3/4: $1\cpuregs_wrdata[31:0]
     4/4: $1\cpuregs_write[0:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1295$467'.
     1/2: $2\clear_prefetched_high_word[0:0]
     2/2: $1\clear_prefetched_high_word[0:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1293$466'.
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1249$444'.
     1/2: $1\alu_out[31:0]
     2/2: $1\alu_out_0[0:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1186$432'.
     1/8: $8\dbg_ascii_state[127:0]
     2/8: $7\dbg_ascii_state[127:0]
     3/8: $6\dbg_ascii_state[127:0]
     4/8: $5\dbg_ascii_state[127:0]
     5/8: $4\dbg_ascii_state[127:0]
     6/8: $3\dbg_ascii_state[127:0]
     7/8: $2\dbg_ascii_state[127:0]
     8/8: $1\dbg_ascii_state[127:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:858$169'.
     1/77: $0\decoded_rs1[4:0] [4]
     2/77: $0\decoded_imm_j[31:0] [10]
     3/77: $0\decoded_imm_j[31:0] [7]
     4/77: $0\decoded_imm_j[31:0] [6]
     5/77: $0\decoded_imm_j[31:0] [3:1]
     6/77: $0\decoded_imm_j[31:0] [5]
     7/77: $0\decoded_imm_j[31:0] [9:8]
     8/77: $0\decoded_imm_j[31:0] [31:20]
     9/77: $0\decoded_imm_j[31:0] [4]
    10/77: $0\decoded_imm_j[31:0] [11]
    11/77: $0\decoded_imm_j[31:0] [0]
    12/77: $0\decoded_rs1[4:0] [3:0]
    13/77: $0\is_lui_auipc_jal_jalr_addi_add_sub[0:0]
    14/77: $0\is_alu_reg_reg[0:0]
    15/77: $0\is_alu_reg_imm[0:0]
    16/77: $0\is_beq_bne_blt_bge_bltu_bgeu[0:0]
    17/77: $0\is_sll_srl_sra[0:0]
    18/77: $0\is_sb_sh_sw[0:0]
    19/77: $0\is_jalr_addi_slti_sltiu_xori_ori_andi[0:0]
    20/77: $0\is_slli_srli_srai[0:0]
    21/77: $0\is_lb_lh_lw_lbu_lhu[0:0]
    22/77: $0\compressed_instr[0:0]
    23/77: $0\is_compare[0:0]
    24/77: $0\decoded_imm[31:0]
    25/77: $0\decoded_rs2[4:0]
    26/77: $0\decoded_imm_j[31:0] [19:12]
    27/77: $0\decoded_rd[4:0]
    28/77: $0\instr_timer[0:0]
    29/77: $0\instr_waitirq[0:0]
    30/77: $0\instr_maskirq[0:0]
    31/77: $0\instr_retirq[0:0]
    32/77: $0\instr_setq[0:0]
    33/77: $0\instr_getq[0:0]
    34/77: $0\instr_fence[0:0]
    35/77: $0\instr_ecall_ebreak[0:0]
    36/77: $0\instr_rdinstrh[0:0]
    37/77: $0\instr_rdinstr[0:0]
    38/77: $0\instr_rdcycleh[0:0]
    39/77: $0\instr_rdcycle[0:0]
    40/77: $0\instr_and[0:0]
    41/77: $0\instr_or[0:0]
    42/77: $0\instr_sra[0:0]
    43/77: $0\instr_srl[0:0]
    44/77: $0\instr_xor[0:0]
    45/77: $0\instr_sltu[0:0]
    46/77: $0\instr_slt[0:0]
    47/77: $0\instr_sll[0:0]
    48/77: $0\instr_sub[0:0]
    49/77: $0\instr_add[0:0]
    50/77: $0\instr_srai[0:0]
    51/77: $0\instr_srli[0:0]
    52/77: $0\instr_slli[0:0]
    53/77: $0\instr_andi[0:0]
    54/77: $0\instr_ori[0:0]
    55/77: $0\instr_xori[0:0]
    56/77: $0\instr_sltiu[0:0]
    57/77: $0\instr_slti[0:0]
    58/77: $0\instr_addi[0:0]
    59/77: $0\instr_sw[0:0]
    60/77: $0\instr_sh[0:0]
    61/77: $0\instr_sb[0:0]
    62/77: $0\instr_lhu[0:0]
    63/77: $0\instr_lbu[0:0]
    64/77: $0\instr_lw[0:0]
    65/77: $0\instr_lh[0:0]
    66/77: $0\instr_lb[0:0]
    67/77: $0\instr_bgeu[0:0]
    68/77: $0\instr_bltu[0:0]
    69/77: $0\instr_bge[0:0]
    70/77: $0\instr_blt[0:0]
    71/77: $0\instr_bne[0:0]
    72/77: $0\instr_beq[0:0]
    73/77: $0\instr_jalr[0:0]
    74/77: $0\instr_jal[0:0]
    75/77: $0\instr_auipc[0:0]
    76/77: $0\instr_lui[0:0]
    77/77: $0\pcpi_insn[31:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:809$167'.
     1/13: $3\dbg_insn_opcode[31:0]
     2/13: $2\dbg_insn_rd[4:0]
     3/13: $2\dbg_insn_rs2[4:0]
     4/13: $2\dbg_insn_rs1[4:0]
     5/13: $2\dbg_insn_opcode[31:0]
     6/13: $2\dbg_insn_imm[31:0]
     7/13: $2\dbg_ascii_instr[63:0]
     8/13: $1\dbg_insn_rd[4:0]
     9/13: $1\dbg_insn_rs2[4:0]
    10/13: $1\dbg_insn_rs1[4:0]
    11/13: $1\dbg_insn_imm[31:0]
    12/13: $1\dbg_ascii_instr[63:0]
    13/13: $1\dbg_insn_opcode[31:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:778$163'.
     1/8: $0\cached_insn_rd[4:0]
     2/8: $0\cached_insn_rs2[4:0]
     3/8: $0\cached_insn_rs1[4:0]
     4/8: $0\cached_insn_opcode[31:0]
     5/8: $0\cached_insn_imm[31:0]
     6/8: $0\cached_ascii_instr[63:0]
     7/8: $0\dbg_valid_insn[0:0]
     8/8: $0\dbg_insn_addr[31:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:701$162'.
     1/48: $48\new_ascii_instr[63:0]
     2/48: $47\new_ascii_instr[63:0]
     3/48: $46\new_ascii_instr[63:0]
     4/48: $45\new_ascii_instr[63:0]
     5/48: $44\new_ascii_instr[63:0]
     6/48: $43\new_ascii_instr[63:0]
     7/48: $42\new_ascii_instr[63:0]
     8/48: $41\new_ascii_instr[63:0]
     9/48: $40\new_ascii_instr[63:0]
    10/48: $39\new_ascii_instr[63:0]
    11/48: $38\new_ascii_instr[63:0]
    12/48: $37\new_ascii_instr[63:0]
    13/48: $36\new_ascii_instr[63:0]
    14/48: $35\new_ascii_instr[63:0]
    15/48: $34\new_ascii_instr[63:0]
    16/48: $33\new_ascii_instr[63:0]
    17/48: $32\new_ascii_instr[63:0]
    18/48: $31\new_ascii_instr[63:0]
    19/48: $30\new_ascii_instr[63:0]
    20/48: $29\new_ascii_instr[63:0]
    21/48: $28\new_ascii_instr[63:0]
    22/48: $27\new_ascii_instr[63:0]
    23/48: $26\new_ascii_instr[63:0]
    24/48: $25\new_ascii_instr[63:0]
    25/48: $24\new_ascii_instr[63:0]
    26/48: $23\new_ascii_instr[63:0]
    27/48: $22\new_ascii_instr[63:0]
    28/48: $21\new_ascii_instr[63:0]
    29/48: $20\new_ascii_instr[63:0]
    30/48: $19\new_ascii_instr[63:0]
    31/48: $18\new_ascii_instr[63:0]
    32/48: $17\new_ascii_instr[63:0]
    33/48: $16\new_ascii_instr[63:0]
    34/48: $15\new_ascii_instr[63:0]
    35/48: $14\new_ascii_instr[63:0]
    36/48: $13\new_ascii_instr[63:0]
    37/48: $12\new_ascii_instr[63:0]
    38/48: $11\new_ascii_instr[63:0]
    39/48: $10\new_ascii_instr[63:0]
    40/48: $9\new_ascii_instr[63:0]
    41/48: $8\new_ascii_instr[63:0]
    42/48: $7\new_ascii_instr[63:0]
    43/48: $6\new_ascii_instr[63:0]
    44/48: $5\new_ascii_instr[63:0]
    45/48: $4\new_ascii_instr[63:0]
    46/48: $3\new_ascii_instr[63:0]
    47/48: $2\new_ascii_instr[63:0]
    48/48: $1\new_ascii_instr[63:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:565$138'.
     1/9: $0\mem_16bit_buffer[15:0]
     2/9: $0\prefetched_high_word[0:0]
     3/9: $0\mem_la_secondword[0:0]
     4/9: $0\mem_state[1:0]
     5/9: $0\mem_wstrb[3:0]
     6/9: $0\mem_wdata[31:0]
     7/9: $0\mem_addr[31:0]
     8/9: $0\mem_instr[0:0]
     9/9: $0\mem_valid[0:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:1239$677'.
Creating decoders for process `\picorv32.$proc$src/picorv32.v:430$100'.
     1/9: $0\mem_rdata_q[31:0] [31]
     2/9: $0\mem_rdata_q[31:0] [7]
     3/9: $0\mem_rdata_q[31:0] [24:20]
     4/9: $0\mem_rdata_q[31:0] [19:15]
     5/9: $0\mem_rdata_q[31:0] [6:0]
     6/9: $0\mem_rdata_q[31:0] [14:12]
     7/9: $0\mem_rdata_q[31:0] [11:8]
     8/9: $0\mem_rdata_q[31:0] [30:25]
     9/9: $0\next_insn_opcode[31:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:401$97'.
     1/5: $3\mem_rdata_word[31:0]
     2/5: $2\mem_rdata_word[31:0]
     3/5: $1\mem_rdata_word[31:0]
     4/5: $1\mem_la_wstrb[3:0]
     5/5: $1\mem_la_wdata[31:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:390$92'.
     1/2: $0\last_mem_valid[0:0]
     2/2: $0\mem_la_firstword_reg[0:0]
Creating decoders for process `\picorv32.$proc$src/picorv32.v:325$18'.
     1/2: $1\pcpi_int_rd[31:0]
     2/2: $1\pcpi_int_wr[0:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\picorv32.\cpuregs_rs1' from process `\picorv32.$proc$src/picorv32.v:1348$493'.
No latch inferred for signal `\picorv32.\cpuregs_rs2' from process `\picorv32.$proc$src/picorv32.v:1348$493'.
No latch inferred for signal `\picorv32.\decoded_rs' from process `\picorv32.$proc$src/picorv32.v:1348$493'.
No latch inferred for signal `\picorv32.\cpuregs_write' from process `\picorv32.$proc$src/picorv32.v:1309$472'.
No latch inferred for signal `\picorv32.\cpuregs_wrdata' from process `\picorv32.$proc$src/picorv32.v:1309$472'.
No latch inferred for signal `\picorv32.\clear_prefetched_high_word' from process `\picorv32.$proc$src/picorv32.v:1295$467'.
No latch inferred for signal `\picorv32.\alu_out' from process `\picorv32.$proc$src/picorv32.v:1249$444'.
No latch inferred for signal `\picorv32.\alu_out_0' from process `\picorv32.$proc$src/picorv32.v:1249$444'.
No latch inferred for signal `\picorv32.\dbg_ascii_state' from process `\picorv32.$proc$src/picorv32.v:1186$432'.
No latch inferred for signal `\picorv32.\dbg_insn_opcode' from process `\picorv32.$proc$src/picorv32.v:809$167'.
No latch inferred for signal `\picorv32.\dbg_ascii_instr' from process `\picorv32.$proc$src/picorv32.v:809$167'.
No latch inferred for signal `\picorv32.\dbg_insn_imm' from process `\picorv32.$proc$src/picorv32.v:809$167'.
No latch inferred for signal `\picorv32.\dbg_insn_rs1' from process `\picorv32.$proc$src/picorv32.v:809$167'.
No latch inferred for signal `\picorv32.\dbg_insn_rs2' from process `\picorv32.$proc$src/picorv32.v:809$167'.
No latch inferred for signal `\picorv32.\dbg_insn_rd' from process `\picorv32.$proc$src/picorv32.v:809$167'.
No latch inferred for signal `\picorv32.\new_ascii_instr' from process `\picorv32.$proc$src/picorv32.v:701$162'.
No latch inferred for signal `\picorv32.\alu_add_sub' from process `\picorv32.$proc$src/picorv32.v:1239$677'.
No latch inferred for signal `\picorv32.\alu_shl' from process `\picorv32.$proc$src/picorv32.v:1239$677'.
No latch inferred for signal `\picorv32.\alu_shr' from process `\picorv32.$proc$src/picorv32.v:1239$677'.
No latch inferred for signal `\picorv32.\alu_eq' from process `\picorv32.$proc$src/picorv32.v:1239$677'.
No latch inferred for signal `\picorv32.\alu_ltu' from process `\picorv32.$proc$src/picorv32.v:1239$677'.
No latch inferred for signal `\picorv32.\alu_lts' from process `\picorv32.$proc$src/picorv32.v:1239$677'.
No latch inferred for signal `\picorv32.\mem_la_wdata' from process `\picorv32.$proc$src/picorv32.v:401$97'.
No latch inferred for signal `\picorv32.\mem_la_wstrb' from process `\picorv32.$proc$src/picorv32.v:401$97'.
No latch inferred for signal `\picorv32.\mem_rdata_word' from process `\picorv32.$proc$src/picorv32.v:401$97'.
No latch inferred for signal `\picorv32.\pcpi_int_wr' from process `\picorv32.$proc$src/picorv32.v:325$18'.
No latch inferred for signal `\picorv32.\pcpi_int_rd' from process `\picorv32.$proc$src/picorv32.v:325$18'.
No latch inferred for signal `\picorv32.\pcpi_int_wait' from process `\picorv32.$proc$src/picorv32.v:325$18'.
No latch inferred for signal `\picorv32.\pcpi_int_ready' from process `\picorv32.$proc$src/picorv32.v:325$18'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\picorv32.\trap' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3582' with positive edge clock.
Creating register for signal `\picorv32.\pcpi_valid' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3583' with positive edge clock.
Creating register for signal `\picorv32.\eoi' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3584' with positive edge clock.
Creating register for signal `\picorv32.\trace_valid' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3585' with positive edge clock.
Creating register for signal `\picorv32.\trace_data' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3586' with positive edge clock.
Creating register for signal `\picorv32.\count_cycle' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3587' with positive edge clock.
Creating register for signal `\picorv32.\count_instr' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3588' with positive edge clock.
Creating register for signal `\picorv32.\reg_pc' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3589' with positive edge clock.
Creating register for signal `\picorv32.\reg_next_pc' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3590' with positive edge clock.
Creating register for signal `\picorv32.\reg_op1' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3591' with positive edge clock.
Creating register for signal `\picorv32.\reg_op2' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3592' with positive edge clock.
Creating register for signal `\picorv32.\reg_out' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3593' with positive edge clock.
Creating register for signal `\picorv32.\reg_sh' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3594' with positive edge clock.
Creating register for signal `\picorv32.\irq_delay' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3595' with positive edge clock.
Creating register for signal `\picorv32.\irq_active' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3596' with positive edge clock.
Creating register for signal `\picorv32.\irq_mask' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3597' with positive edge clock.
Creating register for signal `\picorv32.\irq_pending' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3598' with positive edge clock.
Creating register for signal `\picorv32.\timer' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3599' with positive edge clock.
Creating register for signal `\picorv32.\mem_wordsize' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3600' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_prefetch' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3601' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_rinst' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3602' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_rdata' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3603' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_wdata' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3604' with positive edge clock.
Creating register for signal `\picorv32.\decoder_trigger' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3605' with positive edge clock.
Creating register for signal `\picorv32.\decoder_trigger_q' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3606' with positive edge clock.
Creating register for signal `\picorv32.\decoder_pseudo_trigger' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3607' with positive edge clock.
Creating register for signal `\picorv32.\decoder_pseudo_trigger_q' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3608' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs1val' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3609' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs2val' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3610' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs1val_valid' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3611' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs2val_valid' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3612' with positive edge clock.
Creating register for signal `\picorv32.\cpu_state' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3613' with positive edge clock.
Creating register for signal `\picorv32.\irq_state' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3614' with positive edge clock.
Creating register for signal `\picorv32.\set_mem_do_rinst' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3615' with positive edge clock.
Creating register for signal `\picorv32.\set_mem_do_rdata' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3616' with positive edge clock.
Creating register for signal `\picorv32.\set_mem_do_wdata' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3617' with positive edge clock.
Creating register for signal `\picorv32.\latched_store' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3618' with positive edge clock.
Creating register for signal `\picorv32.\latched_stalu' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3619' with positive edge clock.
Creating register for signal `\picorv32.\latched_branch' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3620' with positive edge clock.
Creating register for signal `\picorv32.\latched_compr' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3621' with positive edge clock.
Creating register for signal `\picorv32.\latched_trace' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3622' with positive edge clock.
Creating register for signal `\picorv32.\latched_is_lu' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3623' with positive edge clock.
Creating register for signal `\picorv32.\latched_is_lh' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3624' with positive edge clock.
Creating register for signal `\picorv32.\latched_is_lb' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3625' with positive edge clock.
Creating register for signal `\picorv32.\latched_rd' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3626' with positive edge clock.
Creating register for signal `\picorv32.\current_pc' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3627' with positive edge clock.
Creating register for signal `\picorv32.\pcpi_timeout' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3628' with positive edge clock.
Creating register for signal `\picorv32.\next_irq_pending' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3629' with positive edge clock.
Creating register for signal `\picorv32.\do_waitirq' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3630' with positive edge clock.
Creating register for signal `\picorv32.\alu_out_q' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3631' with positive edge clock.
Creating register for signal `\picorv32.\alu_out_0_q' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3632' with positive edge clock.
Creating register for signal `\picorv32.\alu_wait' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3633' with positive edge clock.
Creating register for signal `\picorv32.\alu_wait_2' using process `\picorv32.$proc$src/picorv32.v:1402$509'.
  created $dff cell `$procdff$3634' with positive edge clock.
Creating register for signal `\picorv32.$memwr$\cpuregs$src/picorv32.v:1344$17_ADDR' using process `\picorv32.$proc$src/picorv32.v:1337$484'.
  created $dff cell `$procdff$3635' with positive edge clock.
Creating register for signal `\picorv32.$memwr$\cpuregs$src/picorv32.v:1344$17_DATA' using process `\picorv32.$proc$src/picorv32.v:1337$484'.
  created $dff cell `$procdff$3636' with positive edge clock.
Creating register for signal `\picorv32.$memwr$\cpuregs$src/picorv32.v:1344$17_EN' using process `\picorv32.$proc$src/picorv32.v:1337$484'.
  created $dff cell `$procdff$3637' with positive edge clock.
Creating register for signal `\picorv32.\clear_prefetched_high_word_q' using process `\picorv32.$proc$src/picorv32.v:1293$466'.
  created $dff cell `$procdff$3638' with positive edge clock.
Creating register for signal `\picorv32.\pcpi_insn' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3639' with positive edge clock.
Creating register for signal `\picorv32.\instr_lui' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3640' with positive edge clock.
Creating register for signal `\picorv32.\instr_auipc' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3641' with positive edge clock.
Creating register for signal `\picorv32.\instr_jal' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3642' with positive edge clock.
Creating register for signal `\picorv32.\instr_jalr' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3643' with positive edge clock.
Creating register for signal `\picorv32.\instr_beq' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3644' with positive edge clock.
Creating register for signal `\picorv32.\instr_bne' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3645' with positive edge clock.
Creating register for signal `\picorv32.\instr_blt' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3646' with positive edge clock.
Creating register for signal `\picorv32.\instr_bge' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3647' with positive edge clock.
Creating register for signal `\picorv32.\instr_bltu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3648' with positive edge clock.
Creating register for signal `\picorv32.\instr_bgeu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3649' with positive edge clock.
Creating register for signal `\picorv32.\instr_lb' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3650' with positive edge clock.
Creating register for signal `\picorv32.\instr_lh' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3651' with positive edge clock.
Creating register for signal `\picorv32.\instr_lw' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3652' with positive edge clock.
Creating register for signal `\picorv32.\instr_lbu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3653' with positive edge clock.
Creating register for signal `\picorv32.\instr_lhu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3654' with positive edge clock.
Creating register for signal `\picorv32.\instr_sb' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3655' with positive edge clock.
Creating register for signal `\picorv32.\instr_sh' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3656' with positive edge clock.
Creating register for signal `\picorv32.\instr_sw' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3657' with positive edge clock.
Creating register for signal `\picorv32.\instr_addi' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3658' with positive edge clock.
Creating register for signal `\picorv32.\instr_slti' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3659' with positive edge clock.
Creating register for signal `\picorv32.\instr_sltiu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3660' with positive edge clock.
Creating register for signal `\picorv32.\instr_xori' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3661' with positive edge clock.
Creating register for signal `\picorv32.\instr_ori' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3662' with positive edge clock.
Creating register for signal `\picorv32.\instr_andi' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3663' with positive edge clock.
Creating register for signal `\picorv32.\instr_slli' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3664' with positive edge clock.
Creating register for signal `\picorv32.\instr_srli' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3665' with positive edge clock.
Creating register for signal `\picorv32.\instr_srai' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3666' with positive edge clock.
Creating register for signal `\picorv32.\instr_add' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3667' with positive edge clock.
Creating register for signal `\picorv32.\instr_sub' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3668' with positive edge clock.
Creating register for signal `\picorv32.\instr_sll' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3669' with positive edge clock.
Creating register for signal `\picorv32.\instr_slt' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3670' with positive edge clock.
Creating register for signal `\picorv32.\instr_sltu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3671' with positive edge clock.
Creating register for signal `\picorv32.\instr_xor' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3672' with positive edge clock.
Creating register for signal `\picorv32.\instr_srl' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3673' with positive edge clock.
Creating register for signal `\picorv32.\instr_sra' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3674' with positive edge clock.
Creating register for signal `\picorv32.\instr_or' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3675' with positive edge clock.
Creating register for signal `\picorv32.\instr_and' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3676' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdcycle' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3677' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdcycleh' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3678' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdinstr' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3679' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdinstrh' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3680' with positive edge clock.
Creating register for signal `\picorv32.\instr_ecall_ebreak' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3681' with positive edge clock.
Creating register for signal `\picorv32.\instr_fence' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3682' with positive edge clock.
Creating register for signal `\picorv32.\instr_getq' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3683' with positive edge clock.
Creating register for signal `\picorv32.\instr_setq' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3684' with positive edge clock.
Creating register for signal `\picorv32.\instr_retirq' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3685' with positive edge clock.
Creating register for signal `\picorv32.\instr_maskirq' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3686' with positive edge clock.
Creating register for signal `\picorv32.\instr_waitirq' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3687' with positive edge clock.
Creating register for signal `\picorv32.\instr_timer' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3688' with positive edge clock.
Creating register for signal `\picorv32.\decoded_rd' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3689' with positive edge clock.
Creating register for signal `\picorv32.\decoded_rs1' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3690' with positive edge clock.
Creating register for signal `\picorv32.\decoded_rs2' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3691' with positive edge clock.
Creating register for signal `\picorv32.\decoded_imm' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3692' with positive edge clock.
Creating register for signal `\picorv32.\decoded_imm_j' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3693' with positive edge clock.
Creating register for signal `\picorv32.\compressed_instr' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3694' with positive edge clock.
Creating register for signal `\picorv32.\is_lui_auipc_jal' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3695' with positive edge clock.
Creating register for signal `\picorv32.\is_lb_lh_lw_lbu_lhu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3696' with positive edge clock.
Creating register for signal `\picorv32.\is_slli_srli_srai' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3697' with positive edge clock.
Creating register for signal `\picorv32.\is_jalr_addi_slti_sltiu_xori_ori_andi' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3698' with positive edge clock.
Creating register for signal `\picorv32.\is_sb_sh_sw' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3699' with positive edge clock.
Creating register for signal `\picorv32.\is_sll_srl_sra' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3700' with positive edge clock.
Creating register for signal `\picorv32.\is_lui_auipc_jal_jalr_addi_add_sub' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3701' with positive edge clock.
Creating register for signal `\picorv32.\is_slti_blt_slt' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3702' with positive edge clock.
Creating register for signal `\picorv32.\is_sltiu_bltu_sltu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3703' with positive edge clock.
Creating register for signal `\picorv32.\is_beq_bne_blt_bge_bltu_bgeu' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3704' with positive edge clock.
Creating register for signal `\picorv32.\is_lbu_lhu_lw' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3705' with positive edge clock.
Creating register for signal `\picorv32.\is_alu_reg_imm' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3706' with positive edge clock.
Creating register for signal `\picorv32.\is_alu_reg_reg' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3707' with positive edge clock.
Creating register for signal `\picorv32.\is_compare' using process `\picorv32.$proc$src/picorv32.v:858$169'.
  created $dff cell `$procdff$3708' with positive edge clock.
Creating register for signal `\picorv32.\dbg_insn_addr' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3709' with positive edge clock.
Creating register for signal `\picorv32.\q_ascii_instr' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3710' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_imm' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3711' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_opcode' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3712' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_rs1' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3713' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_rs2' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3714' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_rd' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3715' with positive edge clock.
Creating register for signal `\picorv32.\dbg_next' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3716' with positive edge clock.
Creating register for signal `\picorv32.\dbg_valid_insn' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3717' with positive edge clock.
Creating register for signal `\picorv32.\cached_ascii_instr' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3718' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_imm' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3719' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_opcode' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3720' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_rs1' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3721' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_rs2' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3722' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_rd' using process `\picorv32.$proc$src/picorv32.v:778$163'.
  created $dff cell `$procdff$3723' with positive edge clock.
Creating register for signal `\picorv32.\mem_valid' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3724' with positive edge clock.
Creating register for signal `\picorv32.\mem_instr' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3725' with positive edge clock.
Creating register for signal `\picorv32.\mem_addr' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3726' with positive edge clock.
Creating register for signal `\picorv32.\mem_wdata' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3727' with positive edge clock.
Creating register for signal `\picorv32.\mem_wstrb' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3728' with positive edge clock.
Creating register for signal `\picorv32.\mem_state' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3729' with positive edge clock.
Creating register for signal `\picorv32.\mem_la_secondword' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3730' with positive edge clock.
Creating register for signal `\picorv32.\prefetched_high_word' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3731' with positive edge clock.
Creating register for signal `\picorv32.\mem_16bit_buffer' using process `\picorv32.$proc$src/picorv32.v:565$138'.
  created $dff cell `$procdff$3732' with positive edge clock.
Creating register for signal `\picorv32.\next_insn_opcode' using process `\picorv32.$proc$src/picorv32.v:430$100'.
  created $dff cell `$procdff$3733' with positive edge clock.
Creating register for signal `\picorv32.\mem_rdata_q' using process `\picorv32.$proc$src/picorv32.v:430$100'.
  created $dff cell `$procdff$3734' with positive edge clock.
Creating register for signal `\picorv32.\mem_la_firstword_reg' using process `\picorv32.$proc$src/picorv32.v:390$92'.
  created $dff cell `$procdff$3735' with positive edge clock.
Creating register for signal `\picorv32.\last_mem_valid' using process `\picorv32.$proc$src/picorv32.v:390$92'.
  created $dff cell `$procdff$3736' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 53 empty switches in `\picorv32.$proc$src/picorv32.v:1402$509'.
Removing empty process `picorv32.$proc$src/picorv32.v:1402$509'.
Removing empty process `picorv32.$proc$src/picorv32.v:1348$493'.
Found and cleaned up 1 empty switch in `\picorv32.$proc$src/picorv32.v:1337$484'.
Removing empty process `picorv32.$proc$src/picorv32.v:1337$484'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$src/picorv32.v:1309$472'.
Removing empty process `picorv32.$proc$src/picorv32.v:1309$472'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$src/picorv32.v:1295$467'.
Removing empty process `picorv32.$proc$src/picorv32.v:1295$467'.
Removing empty process `picorv32.$proc$src/picorv32.v:1293$466'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$src/picorv32.v:1249$444'.
Removing empty process `picorv32.$proc$src/picorv32.v:1249$444'.
Found and cleaned up 8 empty switches in `\picorv32.$proc$src/picorv32.v:1186$432'.
Removing empty process `picorv32.$proc$src/picorv32.v:1186$432'.
Found and cleaned up 22 empty switches in `\picorv32.$proc$src/picorv32.v:858$169'.
Removing empty process `picorv32.$proc$src/picorv32.v:858$169'.
Found and cleaned up 3 empty switches in `\picorv32.$proc$src/picorv32.v:809$167'.
Removing empty process `picorv32.$proc$src/picorv32.v:809$167'.
Found and cleaned up 5 empty switches in `\picorv32.$proc$src/picorv32.v:778$163'.
Removing empty process `picorv32.$proc$src/picorv32.v:778$163'.
Found and cleaned up 48 empty switches in `\picorv32.$proc$src/picorv32.v:701$162'.
Removing empty process `picorv32.$proc$src/picorv32.v:701$162'.
Found and cleaned up 16 empty switches in `\picorv32.$proc$src/picorv32.v:565$138'.
Removing empty process `picorv32.$proc$src/picorv32.v:565$138'.
Removing empty process `picorv32.$proc$src/picorv32.v:1239$677'.
Found and cleaned up 19 empty switches in `\picorv32.$proc$src/picorv32.v:430$100'.
Removing empty process `picorv32.$proc$src/picorv32.v:430$100'.
Found and cleaned up 3 empty switches in `\picorv32.$proc$src/picorv32.v:401$97'.
Removing empty process `picorv32.$proc$src/picorv32.v:401$97'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$src/picorv32.v:390$92'.
Removing empty process `picorv32.$proc$src/picorv32.v:390$92'.
Found and cleaned up 1 empty switch in `\picorv32.$proc$src/picorv32.v:325$18'.
Removing empty process `picorv32.$proc$src/picorv32.v:325$18'.
Cleaned up 187 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~827 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 718 unused cells and 2199 unused wires.
<suppressed ~774 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module picorv32...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~585 debug messages>
Removed a total of 195 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1053.
    dead port 2/2 on $mux $procmux$1055.
    dead port 2/2 on $mux $procmux$1058.
    dead port 2/2 on $mux $procmux$1140.
    dead port 2/2 on $mux $procmux$1145.
    dead port 2/2 on $mux $procmux$1148.
    dead port 1/3 on $pmux $procmux$1201.
    dead port 2/2 on $mux $procmux$1233.
    dead port 2/2 on $mux $procmux$1246.
    dead port 2/2 on $mux $procmux$1259.
    dead port 1/7 on $pmux $procmux$1486.
    dead port 2/7 on $pmux $procmux$1486.
    dead port 3/7 on $pmux $procmux$1486.
    dead port 4/7 on $pmux $procmux$1486.
    dead port 5/7 on $pmux $procmux$1486.
    dead port 4/12 on $pmux $procmux$1526.
    dead port 5/12 on $pmux $procmux$1526.
    dead port 6/12 on $pmux $procmux$1526.
    dead port 7/12 on $pmux $procmux$1526.
    dead port 8/12 on $pmux $procmux$1526.
    dead port 1/7 on $pmux $procmux$1731.
    dead port 2/7 on $pmux $procmux$1731.
    dead port 3/7 on $pmux $procmux$1731.
    dead port 4/7 on $pmux $procmux$1731.
    dead port 5/7 on $pmux $procmux$1731.
    dead port 3/4 on $pmux $procmux$1795.
    dead port 1/2 on $mux $procmux$1802.
    dead port 2/2 on $mux $procmux$1802.
    dead port 4/12 on $pmux $procmux$1814.
    dead port 5/12 on $pmux $procmux$1814.
    dead port 6/12 on $pmux $procmux$1814.
    dead port 7/12 on $pmux $procmux$1814.
    dead port 8/12 on $pmux $procmux$1814.
    dead port 3/4 on $pmux $procmux$1996.
    dead port 4/12 on $pmux $procmux$2012.
    dead port 5/12 on $pmux $procmux$2012.
    dead port 6/12 on $pmux $procmux$2012.
    dead port 7/12 on $pmux $procmux$2012.
    dead port 8/12 on $pmux $procmux$2012.
    dead port 4/12 on $pmux $procmux$2195.
    dead port 5/12 on $pmux $procmux$2195.
    dead port 6/12 on $pmux $procmux$2195.
    dead port 7/12 on $pmux $procmux$2195.
    dead port 8/12 on $pmux $procmux$2195.
    dead port 1/9 on $pmux $procmux$2248.
    dead port 2/9 on $pmux $procmux$2248.
    dead port 3/9 on $pmux $procmux$2248.
    dead port 4/9 on $pmux $procmux$2248.
    dead port 5/9 on $pmux $procmux$2248.
    dead port 1/5 on $pmux $procmux$2374.
    dead port 2/5 on $pmux $procmux$2374.
    dead port 2/2 on $mux $procmux$2379.
    dead port 1/5 on $pmux $procmux$2383.
    dead port 2/5 on $pmux $procmux$2383.
    dead port 2/2 on $mux $procmux$2388.
    dead port 1/8 on $pmux $procmux$2403.
    dead port 2/8 on $pmux $procmux$2403.
    dead port 2/2 on $mux $procmux$3541.
    dead port 2/2 on $mux $procmux$3548.
    dead port 2/2 on $mux $procmux$861.
    dead port 2/2 on $mux $procmux$871.
    dead port 2/2 on $mux $procmux$873.
    dead port 2/2 on $mux $procmux$879.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$888.
    dead port 2/2 on $mux $procmux$894.
    dead port 2/2 on $mux $procmux$915.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$930.
    dead port 2/2 on $mux $procmux$937.
    dead port 2/2 on $mux $procmux$940.
    dead port 2/2 on $mux $procmux$964.
    dead port 2/2 on $mux $procmux$967.
    dead port 2/2 on $mux $procmux$976.
    dead port 2/2 on $mux $procmux$979.
    dead port 2/2 on $mux $procmux$987.
    dead port 2/2 on $mux $procmux$989.
    dead port 2/2 on $mux $procmux$992.
Removed 78 multiplexer ports.
<suppressed ~579 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    New ctrl vector for $pmux cell $procmux$1223: { $procmux$1225_CMP $auto$opt_reduce.cc:137:opt_pmux$3739 }
    New ctrl vector for $pmux cell $procmux$1236: { $auto$opt_reduce.cc:137:opt_pmux$3741 $procmux$1056_CMP }
    New ctrl vector for $pmux cell $procmux$1249: { $procmux$1146_CMP $auto$opt_reduce.cc:137:opt_pmux$3743 }
    New ctrl vector for $pmux cell $procmux$1466: { $procmux$1229_CMP $procmux$1146_CMP $procmux$1226_CMP $procmux$1056_CMP }
    New ctrl vector for $pmux cell $procmux$1526: { \is_slli_srli_srai $auto$opt_reduce.cc:137:opt_pmux$3745 }
    New ctrl vector for $pmux cell $procmux$1568: { $eq$src/picorv32.v:1313$473_Y $procmux$1146_CMP }
    New ctrl vector for $pmux cell $procmux$1665: { $eq$src/picorv32.v:1313$473_Y $procmux$1146_CMP }
    New ctrl vector for $pmux cell $procmux$1708: { $eq$src/picorv32.v:1313$473_Y $procmux$1229_CMP $procmux$1146_CMP $auto$opt_reduce.cc:137:opt_pmux$3747 }
    New ctrl vector for $pmux cell $procmux$1814: { \instr_trap \is_rdcycle_rdcycleh_rdinstr_rdinstrh $logic_and$src/picorv32.v:1696$586_Y \is_slli_srli_srai $auto$opt_reduce.cc:137:opt_pmux$3749 }
    New ctrl vector for $pmux cell $procmux$1986: { $eq$src/picorv32.v:1313$473_Y $procmux$1229_CMP $procmux$1228_CMP $procmux$1226_CMP }
    New ctrl vector for $pmux cell $procmux$2012: { $logic_and$src/picorv32.v:1696$586_Y $auto$opt_reduce.cc:137:opt_pmux$3753 $auto$opt_reduce.cc:137:opt_pmux$3751 }
    New ctrl vector for $pmux cell $procmux$2195: { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3755 }
    New ctrl vector for $pmux cell $procmux$2248: { $auto$opt_reduce.cc:137:opt_pmux$3759 \is_lui_auipc_jal }
    Consolidated identical input bits for $mux cell $procmux$2364:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487
      New ports: A=1'0, B=1'1, Y=$0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0]
      New connections: $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [31:1] = { $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$src/picorv32.v:1344$17_EN[31:0]$487 [0] }
    New ctrl vector for $pmux cell $procmux$2374: $auto$opt_reduce.cc:137:opt_pmux$3761
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3752: { \is_slli_srli_srai \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3756: { $logic_and$src/picorv32.v:1696$586_Y \is_slli_srli_srai \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3758: { \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3744: { $logic_and$src/picorv32.v:1696$586_Y \is_jalr_addi_slti_sltiu_xori_ori_andi \is_lui_auipc_jal \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
  Optimizing cells in module \picorv32.
Performed a total of 25 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$3585 ($dff) from module picorv32.
Setting constant 1-bit at position 0 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 1 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 2 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 3 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 4 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 5 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 6 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 7 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 8 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 9 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 10 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 11 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 12 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 13 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 14 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 15 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 16 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 17 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 18 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 19 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 20 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 21 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 22 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 23 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 24 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 25 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 26 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 27 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 28 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 29 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 30 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 31 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 32 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 33 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 34 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 35 on $procdff$3586 ($dff) from module picorv32.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 24 unused cells and 271 unused wires.
<suppressed ~32 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~2 debug messages>

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~493 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    New ctrl vector for $pmux cell $procmux$1336: $auto$opt_reduce.cc:137:opt_pmux$3763
    New ctrl vector for $pmux cell $procmux$1353: { $procmux$1146_CMP $auto$opt_reduce.cc:137:opt_pmux$3765 }
    New ctrl vector for $pmux cell $procmux$1773: { $eq$src/picorv32.v:1313$473_Y $procmux$1229_CMP $procmux$1228_CMP $procmux$1146_CMP $procmux$1226_CMP $auto$opt_reduce.cc:137:opt_pmux$3767 }
    New ctrl vector for $pmux cell $procmux$3300: { $logic_and$src/picorv32.v:380$67_Y $auto$opt_reduce.cc:137:opt_pmux$3769 }
  Optimizing cells in module \picorv32.
Performed a total of 4 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~482 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.6.20. Executing OPT_DFF pass (perform DFF optimizations).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.6.23. Finished fast OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register picorv32.cpu_state.
Not marking picorv32.eoi as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Not marking picorv32.mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Found FSM state register picorv32.mem_wordsize.
Not marking picorv32.pcpi_insn as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\cpu_state' from module `\picorv32'.
  found $dff cell for state register: $procdff$3613
  root of input selection tree: $0\cpu_state[7:0]
  found reset state: 8'10000000 (guessed from mux tree)
  found ctrl input: $logic_and$src/picorv32.v:1938$665_Y
  found ctrl input: $logic_and$src/picorv32.v:1922$647_Y
  found ctrl input: \resetn
  found state code: 8'01000000
  found ctrl input: $auto$opt_reduce.cc:137:opt_pmux$3763
  found ctrl input: $procmux$1226_CMP
  found ctrl input: $procmux$1146_CMP
  found ctrl input: $procmux$1228_CMP
  found ctrl input: $procmux$1229_CMP
  found ctrl input: $eq$src/picorv32.v:1313$473_Y
  found ctrl input: $logic_or$src/picorv32.v:1857$632_Y
  found ctrl input: $logic_and$src/picorv32.v:1872$636_Y
  found ctrl input: $eq$src/picorv32.v:1831$614_Y
  found ctrl input: \is_beq_bne_blt_bge_bltu_bgeu
  found ctrl input: \mem_done
  found ctrl input: \is_sll_srl_sra
  found ctrl input: \is_sb_sh_sw
  found state code: 8'00001000
  found state code: 8'00000100
  found state code: 8'00000010
  found ctrl input: $auto$opt_reduce.cc:137:opt_pmux$3749
  found ctrl input: \is_slli_srli_srai
  found ctrl input: $logic_and$src/picorv32.v:1696$586_Y
  found ctrl input: \is_rdcycle_rdcycleh_rdinstr_rdinstrh
  found ctrl input: \instr_trap
  found state code: 8'00000001
  found state code: 8'10000000
  found ctrl input: \decoder_trigger
  found ctrl input: \instr_jal
  found state code: 8'00100000
  found ctrl input: $logic_and$src/picorv32.v:1930$657_Y
  found ctrl input: $logic_and$src/picorv32.v:1923$650_Y
  found ctrl output: $eq$src/picorv32.v:1313$473_Y
  found ctrl output: $procmux$1056_CMP
  found ctrl output: $procmux$1146_CMP
  found ctrl output: $procmux$1231_CMP
  found ctrl output: $procmux$1229_CMP
  found ctrl output: $procmux$1228_CMP
  found ctrl output: $procmux$1226_CMP
  found ctrl output: $procmux$1225_CMP
  ctrl inputs: { $auto$opt_reduce.cc:137:opt_pmux$3749 $logic_and$src/picorv32.v:1938$665_Y $logic_and$src/picorv32.v:1930$657_Y $logic_and$src/picorv32.v:1923$650_Y $logic_and$src/picorv32.v:1922$647_Y $logic_and$src/picorv32.v:1872$636_Y $logic_or$src/picorv32.v:1857$632_Y $eq$src/picorv32.v:1831$614_Y $logic_and$src/picorv32.v:1696$586_Y $auto$opt_reduce.cc:137:opt_pmux$3763 \is_rdcycle_rdcycleh_rdinstr_rdinstrh \is_beq_bne_blt_bge_bltu_bgeu \is_sll_srl_sra \is_sb_sh_sw \is_slli_srli_srai \decoder_trigger \instr_trap \instr_jal \mem_done \resetn }
  ctrl outputs: { $procmux$1225_CMP $procmux$1226_CMP $procmux$1228_CMP $procmux$1229_CMP $procmux$1231_CMP $procmux$1146_CMP $procmux$1056_CMP $0\cpu_state[7:0] $eq$src/picorv32.v:1313$473_Y }
  transition: 8'10000000 20'-0--0--------------0 -> 8'01000000 16'0000100010000000
  transition: 8'10000000 20'-0--0--------------1 -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-0001--------------0 -> 8'01000000 16'0000100010000000
  transition: 8'10000000 20'-0001--------------1 -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-0011--------------- -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-01-1--------------- -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-1------------------ -> 8'10000000 16'0000100100000000
  transition: 8'01000000 20'-0--0--------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0--0----------0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0--0----------1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 20'-0--0----------1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0001--------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0001----------0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0001----------1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 20'-0001----------1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0011--------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 20'-01-1--------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 20'-1------------------ -> 8'10000000 16'0000000100000001
  transition: 8'00100000 20'-0--0--------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'00--0---0-0-000-0--1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'00--0---0-0--10-0--1 -> 8'00000010 16'0001000000000100
  transition: 8'00100000 20'00--0---0-0-1-0-0--1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'-0--0-----------1--1 -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-0--0-----1--------1 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'-0--0---1----------1 -> 8'00000001 16'0001000000000010
  transition: 8'00100000 20'-0--0---------1----1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'10--0--------------1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'-0001--------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'00001---0-0-000-0--1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'00001---0-0--10-0--1 -> 8'00000010 16'0001000000000100
  transition: 8'00100000 20'00001---0-0-1-0-0--1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'-0001-----------1--1 -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-0001-----1--------1 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'-0001---1----------1 -> 8'00000001 16'0001000000000010
  transition: 8'00100000 20'-0001---------1----1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'10001--------------1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'-0011--------------- -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-01-1--------------- -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-1------------------ -> 8'10000000 16'0001000100000000
  transition: 8'00001000 20'-0--0--------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0--0------0-------1 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0--0------1------01 -> 8'00001000 16'0000010000010000
  transition: 8'00001000 20'-0--0------1------11 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0001--------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0001------0-------1 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0001------1------01 -> 8'00001000 16'0000010000010000
  transition: 8'00001000 20'-0001------1------11 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0011--------------- -> 8'10000000 16'0000010100000000
  transition: 8'00001000 20'-01-1--------------- -> 8'10000000 16'0000010100000000
  transition: 8'00001000 20'-1------------------ -> 8'10000000 16'0000010100000000
  transition: 8'00000100 20'-0--0--------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0--0--0-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00000100 20'-0--0--1-----------1 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0001--------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0001--0-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00000100 20'-0001--1-----------1 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0011--------------- -> 8'10000000 16'0100000100000000
  transition: 8'00000100 20'-01-1--------------- -> 8'10000000 16'0100000100000000
  transition: 8'00000100 20'-1------------------ -> 8'10000000 16'0100000100000000
  transition: 8'00000010 20'-0--0--------------0 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0--0-0------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-0--001------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-0--011------------1 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0001--------------0 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0001-0------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-000101------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-000111------------1 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0011--------------- -> 8'10000000 16'1000000100000000
  transition: 8'00000010 20'-01-1--------------- -> 8'10000000 16'1000000100000000
  transition: 8'00000010 20'-1------------------ -> 8'10000000 16'1000000100000000
  transition: 8'00000001 20'-0--0--------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0--0-0------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-0--001------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-0--011------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0001--------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0001-0------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-000101------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-000111------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0011--------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 20'-01-1--------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 20'-1------------------ -> 8'10000000 16'0000001100000000
Extracting FSM `\mem_wordsize' from module `\picorv32'.
  found $dff cell for state register: $procdff$3600
  root of input selection tree: $0\mem_wordsize[1:0]
  found ctrl input: \resetn
  found ctrl input: $procmux$1056_CMP
  found ctrl input: $procmux$1225_CMP
  found ctrl input: $eq$src/picorv32.v:1313$473_Y
  found ctrl input: $logic_or$src/picorv32.v:1857$632_Y
  found ctrl input: \mem_do_rdata
  found ctrl input: \instr_lw
  found ctrl input: $logic_or$src/picorv32.v:1887$641_Y
  found ctrl input: $logic_or$src/picorv32.v:1886$640_Y
  found state code: 2'00
  found state code: 2'01
  found state code: 2'10
  found ctrl input: \mem_do_wdata
  found ctrl input: \instr_sw
  found ctrl input: \instr_sh
  found ctrl input: \instr_sb
  found ctrl output: $eq$src/picorv32.v:1923$648_Y
  found ctrl output: $eq$src/picorv32.v:1930$655_Y
  found ctrl output: $procmux$3542_CMP
  ctrl inputs: { $procmux$1225_CMP $procmux$1056_CMP $logic_or$src/picorv32.v:1887$641_Y $logic_or$src/picorv32.v:1886$640_Y $logic_or$src/picorv32.v:1857$632_Y $eq$src/picorv32.v:1313$473_Y \instr_sw \instr_sh \instr_sb \instr_lw \mem_do_wdata \mem_do_rdata \resetn }
  ctrl outputs: { $procmux$3542_CMP $eq$src/picorv32.v:1930$655_Y $eq$src/picorv32.v:1923$648_Y $0\mem_wordsize[1:0] }
  transition:       2'00 13'------------0 ->       2'00 5'00100
  transition:       2'00 13'00---0------1 ->       2'00 5'00100
  transition:       2'00 13'-----1------1 ->       2'00 5'00100
  transition:       2'00 13'1---0-------1 ->       2'00 5'00100
  transition:       2'00 13'1---1-000-0-1 ->       2'00 5'00100
  transition:       2'00 13'1---1---1-0-1 ->       2'10 5'00110
  transition:       2'00 13'1---1--1--0-1 ->       2'01 5'00101
  transition:       2'00 13'1---1-1---0-1 ->       2'00 5'00100
  transition:       2'00 13'1---1-----1-1 ->       2'00 5'00100
  transition:       2'00 13'-1--0-------1 ->       2'00 5'00100
  transition:       2'00 13'-1001----0-01 ->       2'00 5'00100
  transition:       2'00 13'-1-11------01 ->       2'10 5'00110
  transition:       2'00 13'-11-1------01 ->       2'01 5'00101
  transition:       2'00 13'-1--1----1-01 ->       2'00 5'00100
  transition:       2'00 13'-1--1------11 ->       2'00 5'00100
  transition:       2'10 13'------------0 ->       2'10 5'10010
  transition:       2'10 13'00---0------1 ->       2'10 5'10010
  transition:       2'10 13'-----1------1 ->       2'00 5'10000
  transition:       2'10 13'1---0-------1 ->       2'10 5'10010
  transition:       2'10 13'1---1-000-0-1 ->       2'10 5'10010
  transition:       2'10 13'1---1---1-0-1 ->       2'10 5'10010
  transition:       2'10 13'1---1--1--0-1 ->       2'01 5'10001
  transition:       2'10 13'1---1-1---0-1 ->       2'00 5'10000
  transition:       2'10 13'1---1-----1-1 ->       2'10 5'10010
  transition:       2'10 13'-1--0-------1 ->       2'10 5'10010
  transition:       2'10 13'-1001----0-01 ->       2'10 5'10010
  transition:       2'10 13'-1-11------01 ->       2'10 5'10010
  transition:       2'10 13'-11-1------01 ->       2'01 5'10001
  transition:       2'10 13'-1--1----1-01 ->       2'00 5'10000
  transition:       2'10 13'-1--1------11 ->       2'10 5'10010
  transition:       2'01 13'------------0 ->       2'01 5'01001
  transition:       2'01 13'00---0------1 ->       2'01 5'01001
  transition:       2'01 13'-----1------1 ->       2'00 5'01000
  transition:       2'01 13'1---0-------1 ->       2'01 5'01001
  transition:       2'01 13'1---1-000-0-1 ->       2'01 5'01001
  transition:       2'01 13'1---1---1-0-1 ->       2'10 5'01010
  transition:       2'01 13'1---1--1--0-1 ->       2'01 5'01001
  transition:       2'01 13'1---1-1---0-1 ->       2'00 5'01000
  transition:       2'01 13'1---1-----1-1 ->       2'01 5'01001
  transition:       2'01 13'-1--0-------1 ->       2'01 5'01001
  transition:       2'01 13'-1001----0-01 ->       2'01 5'01001
  transition:       2'01 13'-1-11------01 ->       2'10 5'01010
  transition:       2'01 13'-11-1------01 ->       2'01 5'01001
  transition:       2'01 13'-1--1----1-01 ->       2'00 5'01000
  transition:       2'01 13'-1--1------11 ->       2'01 5'01001

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mem_wordsize$3780' from module `\picorv32'.
Optimizing FSM `$fsm$\cpu_state$3770' from module `\picorv32'.
  Removing unused input signal $auto$opt_reduce.cc:137:opt_pmux$3763.

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 36 unused cells and 36 unused wires.
<suppressed ~37 debug messages>

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cpu_state$3770' from module `\picorv32'.
  Removing unused output signal $0\cpu_state[7:0] [0].
  Removing unused output signal $0\cpu_state[7:0] [1].
  Removing unused output signal $0\cpu_state[7:0] [2].
  Removing unused output signal $0\cpu_state[7:0] [3].
  Removing unused output signal $0\cpu_state[7:0] [4].
  Removing unused output signal $0\cpu_state[7:0] [5].
  Removing unused output signal $0\cpu_state[7:0] [6].
  Removing unused output signal $0\cpu_state[7:0] [7].
Optimizing FSM `$fsm$\mem_wordsize$3780' from module `\picorv32'.
  Removing unused output signal $0\mem_wordsize[1:0] [0].
  Removing unused output signal $0\mem_wordsize[1:0] [1].

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\cpu_state$3770' from module `\picorv32' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  10000000 -> ------1
  01000000 -> -----1-
  00100000 -> ----1--
  00001000 -> ---1---
  00000100 -> --1----
  00000010 -> -1-----
  00000001 -> 1------
Recoding FSM `$fsm$\mem_wordsize$3780' from module `\picorv32' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\cpu_state$3770' from module `picorv32':
-------------------------------------

  Information on FSM $fsm$\cpu_state$3770 (\cpu_state):

  Number of input signals:   19
  Number of output signals:   8
  Number of state bits:       7

  Input signals:
    0: \resetn
    1: \mem_done
    2: \instr_jal
    3: \instr_trap
    4: \decoder_trigger
    5: \is_slli_srli_srai
    6: \is_sb_sh_sw
    7: \is_sll_srl_sra
    8: \is_beq_bne_blt_bge_bltu_bgeu
    9: \is_rdcycle_rdcycleh_rdinstr_rdinstrh
   10: $logic_and$src/picorv32.v:1696$586_Y
   11: $eq$src/picorv32.v:1831$614_Y
   12: $logic_or$src/picorv32.v:1857$632_Y
   13: $logic_and$src/picorv32.v:1872$636_Y
   14: $logic_and$src/picorv32.v:1922$647_Y
   15: $logic_and$src/picorv32.v:1923$650_Y
   16: $logic_and$src/picorv32.v:1930$657_Y
   17: $logic_and$src/picorv32.v:1938$665_Y
   18: $auto$opt_reduce.cc:137:opt_pmux$3749

  Output signals:
    0: $eq$src/picorv32.v:1313$473_Y
    1: $procmux$1056_CMP
    2: $procmux$1146_CMP
    3: $procmux$1231_CMP
    4: $procmux$1229_CMP
    5: $procmux$1228_CMP
    6: $procmux$1226_CMP
    7: $procmux$1225_CMP

  State encoding:
    0:  7'------1  <RESET STATE>
    1:  7'-----1-
    2:  7'----1--
    3:  7'---1---
    4:  7'--1----
    5:  7'-1-----
    6:  7'1------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 19'-0--0-------------1   ->     0 8'00001000
      1:     0 19'-0001-------------1   ->     0 8'00001000
      2:     0 19'-0011--------------   ->     0 8'00001000
      3:     0 19'-01-1--------------   ->     0 8'00001000
      4:     0 19'-1-----------------   ->     0 8'00001000
      5:     0 19'-0--0-------------0   ->     1 8'00001000
      6:     0 19'-0001-------------0   ->     1 8'00001000
      7:     1 19'-0011--------------   ->     0 8'00000001
      8:     1 19'-01-1--------------   ->     0 8'00000001
      9:     1 19'-1-----------------   ->     0 8'00000001
     10:     1 19'-0--0-------------0   ->     1 8'00000001
     11:     1 19'-0001-------------0   ->     1 8'00000001
     12:     1 19'-0--0---------1-1-1   ->     1 8'00000001
     13:     1 19'-0001---------1-1-1   ->     1 8'00000001
     14:     1 19'-0--0---------0---1   ->     1 8'00000001
     15:     1 19'-0001---------0---1   ->     1 8'00000001
     16:     1 19'-0--0---------1-0-1   ->     2 8'00000001
     17:     1 19'-0001---------1-0-1   ->     2 8'00000001
     18:     2 19'-0--0----------1--1   ->     0 8'00010000
     19:     2 19'-0001----------1--1   ->     0 8'00010000
     20:     2 19'-0011--------------   ->     0 8'00010000
     21:     2 19'-01-1--------------   ->     0 8'00010000
     22:     2 19'-1-----------------   ->     0 8'00010000
     23:     2 19'-0--0-------------0   ->     1 8'00010000
     24:     2 19'-0001-------------0   ->     1 8'00010000
     25:     2 19'-0--0----1--------1   ->     1 8'00010000
     26:     2 19'-0001----1--------1   ->     1 8'00010000
     27:     2 19'00--0---00-000-0--1   ->     3 8'00010000
     28:     2 19'00001---00-000-0--1   ->     3 8'00010000
     29:     2 19'10--0-------------1   ->     3 8'00010000
     30:     2 19'10001-------------1   ->     3 8'00010000
     31:     2 19'00--0---00-1-0-0--1   ->     4 8'00010000
     32:     2 19'00001---00-1-0-0--1   ->     4 8'00010000
     33:     2 19'-0--0--------1----1   ->     4 8'00010000
     34:     2 19'-0001--------1----1   ->     4 8'00010000
     35:     2 19'00--0---00--10-0--1   ->     5 8'00010000
     36:     2 19'00001---00--10-0--1   ->     5 8'00010000
     37:     2 19'-0--0---1---------1   ->     6 8'00010000
     38:     2 19'-0001---1---------1   ->     6 8'00010000
     39:     3 19'-0011--------------   ->     0 8'00000100
     40:     3 19'-01-1--------------   ->     0 8'00000100
     41:     3 19'-1-----------------   ->     0 8'00000100
     42:     3 19'-0--0-------------0   ->     1 8'00000100
     43:     3 19'-0001-------------0   ->     1 8'00000100
     44:     3 19'-0--0-----1------11   ->     1 8'00000100
     45:     3 19'-0001-----1------11   ->     1 8'00000100
     46:     3 19'-0--0-----0-------1   ->     1 8'00000100
     47:     3 19'-0001-----0-------1   ->     1 8'00000100
     48:     3 19'-0--0-----1------01   ->     3 8'00000100
     49:     3 19'-0001-----1------01   ->     3 8'00000100
     50:     4 19'-0011--------------   ->     0 8'01000000
     51:     4 19'-01-1--------------   ->     0 8'01000000
     52:     4 19'-1-----------------   ->     0 8'01000000
     53:     4 19'-0--0-------------0   ->     1 8'01000000
     54:     4 19'-0001-------------0   ->     1 8'01000000
     55:     4 19'-0--0--1----------1   ->     1 8'01000000
     56:     4 19'-0001--1----------1   ->     1 8'01000000
     57:     4 19'-0--0--0----------1   ->     4 8'01000000
     58:     4 19'-0001--0----------1   ->     4 8'01000000
     59:     5 19'-0011--------------   ->     0 8'10000000
     60:     5 19'-01-1--------------   ->     0 8'10000000
     61:     5 19'-1-----------------   ->     0 8'10000000
     62:     5 19'-0--0-------------0   ->     1 8'10000000
     63:     5 19'-0001-------------0   ->     1 8'10000000
     64:     5 19'-0--011-----------1   ->     1 8'10000000
     65:     5 19'-000111-----------1   ->     1 8'10000000
     66:     5 19'-0--0-0-----------1   ->     5 8'10000000
     67:     5 19'-0001-0-----------1   ->     5 8'10000000
     68:     5 19'-0--001-----------1   ->     5 8'10000000
     69:     5 19'-000101-----------1   ->     5 8'10000000
     70:     6 19'-0011--------------   ->     0 8'00000010
     71:     6 19'-01-1--------------   ->     0 8'00000010
     72:     6 19'-1-----------------   ->     0 8'00000010
     73:     6 19'-0--0-------------0   ->     1 8'00000010
     74:     6 19'-0001-------------0   ->     1 8'00000010
     75:     6 19'-0--011-----------1   ->     1 8'00000010
     76:     6 19'-000111-----------1   ->     1 8'00000010
     77:     6 19'-0--0-0-----------1   ->     6 8'00000010
     78:     6 19'-0001-0-----------1   ->     6 8'00000010
     79:     6 19'-0--001-----------1   ->     6 8'00000010
     80:     6 19'-000101-----------1   ->     6 8'00000010

-------------------------------------

FSM `$fsm$\mem_wordsize$3780' from module `picorv32':
-------------------------------------

  Information on FSM $fsm$\mem_wordsize$3780 (\mem_wordsize):

  Number of input signals:   13
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \resetn
    1: \mem_do_rdata
    2: \mem_do_wdata
    3: \instr_lw
    4: \instr_sb
    5: \instr_sh
    6: \instr_sw
    7: $eq$src/picorv32.v:1313$473_Y
    8: $logic_or$src/picorv32.v:1857$632_Y
    9: $logic_or$src/picorv32.v:1886$640_Y
   10: $logic_or$src/picorv32.v:1887$641_Y
   11: $procmux$1056_CMP
   12: $procmux$1225_CMP

  Output signals:
    0: $eq$src/picorv32.v:1923$648_Y
    1: $eq$src/picorv32.v:1930$655_Y
    2: $procmux$3542_CMP

  State encoding:
    0:      3'--1
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 13'------------0   ->     0 3'001
      1:     0 13'-1001----0-01   ->     0 3'001
      2:     0 13'-1--1----1-01   ->     0 3'001
      3:     0 13'-1--1------11   ->     0 3'001
      4:     0 13'1---1-000-0-1   ->     0 3'001
      5:     0 13'1---1-1---0-1   ->     0 3'001
      6:     0 13'1---1-----1-1   ->     0 3'001
      7:     0 13'00---0------1   ->     0 3'001
      8:     0 13'-----1------1   ->     0 3'001
      9:     0 13'-1--0-------1   ->     0 3'001
     10:     0 13'1---0-------1   ->     0 3'001
     11:     0 13'-1-11------01   ->     1 3'001
     12:     0 13'1---1---1-0-1   ->     1 3'001
     13:     0 13'-11-1------01   ->     2 3'001
     14:     0 13'1---1--1--0-1   ->     2 3'001
     15:     1 13'-1--1----1-01   ->     0 3'100
     16:     1 13'1---1-1---0-1   ->     0 3'100
     17:     1 13'-----1------1   ->     0 3'100
     18:     1 13'------------0   ->     1 3'100
     19:     1 13'-1001----0-01   ->     1 3'100
     20:     1 13'-1-11------01   ->     1 3'100
     21:     1 13'-1--1------11   ->     1 3'100
     22:     1 13'1---1-000-0-1   ->     1 3'100
     23:     1 13'1---1---1-0-1   ->     1 3'100
     24:     1 13'1---1-----1-1   ->     1 3'100
     25:     1 13'00---0------1   ->     1 3'100
     26:     1 13'-1--0-------1   ->     1 3'100
     27:     1 13'1---0-------1   ->     1 3'100
     28:     1 13'-11-1------01   ->     2 3'100
     29:     1 13'1---1--1--0-1   ->     2 3'100
     30:     2 13'-1--1----1-01   ->     0 3'010
     31:     2 13'1---1-1---0-1   ->     0 3'010
     32:     2 13'-----1------1   ->     0 3'010
     33:     2 13'-1-11------01   ->     1 3'010
     34:     2 13'1---1---1-0-1   ->     1 3'010
     35:     2 13'------------0   ->     2 3'010
     36:     2 13'-1001----0-01   ->     2 3'010
     37:     2 13'-11-1------01   ->     2 3'010
     38:     2 13'-1--1------11   ->     2 3'010
     39:     2 13'1---1-000-0-1   ->     2 3'010
     40:     2 13'1---1--1--0-1   ->     2 3'010
     41:     2 13'1---1-----1-1   ->     2 3'010
     42:     2 13'00---0------1   ->     2 3'010
     43:     2 13'-1--0-------1   ->     2 3'010
     44:     2 13'1---0-------1   ->     2 3'010

-------------------------------------

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\cpu_state$3770' from module `\picorv32'.
Mapping FSM `$fsm$\mem_wordsize$3780' from module `\picorv32'.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~5 debug messages>

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/4 on $pmux $procmux$1522.
    dead port 2/5 on $pmux $procmux$1986.
    dead port 1/3 on $pmux $procmux$2192.
Removed 3 multiplexer ports.
<suppressed ~426 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3742: { \cpu_state [6:4] \cpu_state [2:0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3740: \cpu_state [5:0]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3738: { \cpu_state [6] \cpu_state [4:0] }
  Optimizing cells in module \picorv32.
Performed a total of 3 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$3734 ($dff) from module picorv32 (D = \mem_rdata, Q = \mem_rdata_q).
Adding EN signal on $procdff$3729 ($dff) from module picorv32 (D = $0\mem_state[1:0], Q = \mem_state).
Adding EN signal on $procdff$3728 ($dff) from module picorv32 (D = $procmux$3270_Y, Q = \mem_wstrb).
Adding EN signal on $procdff$3727 ($dff) from module picorv32 (D = \mem_la_wdata, Q = \mem_wdata).
Adding EN signal on $procdff$3726 ($dff) from module picorv32 (D = \mem_la_addr, Q = \mem_addr).
Adding EN signal on $procdff$3725 ($dff) from module picorv32 (D = $procmux$3290_Y, Q = \mem_instr).
Adding SRST signal on $auto$ff.cc:266:slice$4130 ($dffe) from module picorv32 (D = $procmux$3288_Y, Q = \mem_instr, rval = 1'0).
Adding EN signal on $procdff$3724 ($dff) from module picorv32 (D = $0\mem_valid[0:0], Q = \mem_valid).
Adding SRST signal on $procdff$3708 ($dff) from module picorv32 (D = $reduce_or$src/picorv32.v:864$175_Y, Q = \is_compare, rval = 1'0).
Adding EN signal on $procdff$3707 ($dff) from module picorv32 (D = $eq$src/picorv32.v:878$195_Y, Q = \is_alu_reg_reg).
Adding EN signal on $procdff$3706 ($dff) from module picorv32 (D = $eq$src/picorv32.v:877$194_Y, Q = \is_alu_reg_imm).
Adding SRST signal on $procdff$3704 ($dff) from module picorv32 (D = $procmux$2644_Y, Q = \is_beq_bne_blt_bge_bltu_bgeu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4156 ($sdff) from module picorv32 (D = $eq$src/picorv32.v:874$191_Y, Q = \is_beq_bne_blt_bge_bltu_bgeu).
Adding SRST signal on $procdff$3701 ($dff) from module picorv32 (D = $reduce_or$src/picorv32.v:860$171_Y, Q = \is_lui_auipc_jal_jalr_addi_add_sub, rval = 1'0).
Adding EN signal on $procdff$3700 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1110$427_Y, Q = \is_sll_srl_sra).
Adding EN signal on $procdff$3699 ($dff) from module picorv32 (D = $eq$src/picorv32.v:876$193_Y, Q = \is_sb_sh_sw).
Adding EN signal on $procdff$3698 ($dff) from module picorv32 (D = $logic_or$src/picorv32.v:1101$416_Y, Q = \is_jalr_addi_slti_sltiu_xori_ori_andi).
Adding EN signal on $procdff$3697 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1095$407_Y, Q = \is_slli_srli_srai).
Adding EN signal on $procdff$3696 ($dff) from module picorv32 (D = $eq$src/picorv32.v:875$192_Y, Q = \is_lb_lh_lw_lbu_lhu).
Adding EN signal on $procdff$3694 ($dff) from module picorv32 (D = 1'0, Q = \compressed_instr).
Adding EN signal on $procdff$3693 ($dff) from module picorv32 (D = { \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [19:12] \mem_rdata_latched [20] \mem_rdata_latched [30:21] 1'0 }, Q = \decoded_imm_j).
Adding EN signal on $procdff$3692 ($dff) from module picorv32 (D = $procmux$2690_Y, Q = \decoded_imm).
Adding EN signal on $procdff$3691 ($dff) from module picorv32 (D = \mem_rdata_latched [24:20], Q = \decoded_rs2).
Adding EN signal on $procdff$3690 ($dff) from module picorv32 (D = \mem_rdata_latched [19:15], Q = \decoded_rs1).
Adding EN signal on $procdff$3689 ($dff) from module picorv32 (D = \mem_rdata_latched [11:7], Q = \decoded_rd).
Adding EN signal on $procdff$3688 ($dff) from module picorv32 (D = 1'0, Q = \instr_timer).
Adding EN signal on $procdff$3687 ($dff) from module picorv32 (D = 1'0, Q = \instr_waitirq).
Adding EN signal on $procdff$3686 ($dff) from module picorv32 (D = 1'0, Q = \instr_maskirq).
Adding EN signal on $procdff$3685 ($dff) from module picorv32 (D = 1'0, Q = \instr_retirq).
Adding EN signal on $procdff$3684 ($dff) from module picorv32 (D = 1'0, Q = \instr_setq).
Adding EN signal on $procdff$3683 ($dff) from module picorv32 (D = 1'0, Q = \instr_getq).
Adding SRST signal on $procdff$3682 ($dff) from module picorv32 (D = $procmux$2790_Y, Q = \instr_fence, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4176 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1088$377_Y, Q = \instr_fence).
Adding EN signal on $procdff$3680 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1084$364_Y, Q = \instr_rdinstrh).
Adding EN signal on $procdff$3679 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1083$360_Y, Q = \instr_rdinstr).
Adding EN signal on $procdff$3678 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1081$356_Y, Q = \instr_rdcycleh).
Adding EN signal on $procdff$3677 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1079$348_Y, Q = \instr_rdcycle).
Adding SRST signal on $procdff$3676 ($dff) from module picorv32 (D = $procmux$2804_Y, Q = \instr_and, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4182 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1077$340_Y, Q = \instr_and).
Adding SRST signal on $procdff$3675 ($dff) from module picorv32 (D = $procmux$2808_Y, Q = \instr_or, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4184 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1076$336_Y, Q = \instr_or).
Adding SRST signal on $procdff$3674 ($dff) from module picorv32 (D = $procmux$2812_Y, Q = \instr_sra, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4186 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1075$332_Y, Q = \instr_sra).
Adding SRST signal on $procdff$3673 ($dff) from module picorv32 (D = $procmux$2816_Y, Q = \instr_srl, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4188 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1074$328_Y, Q = \instr_srl).
Adding SRST signal on $procdff$3672 ($dff) from module picorv32 (D = $procmux$2820_Y, Q = \instr_xor, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4190 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1073$324_Y, Q = \instr_xor).
Adding SRST signal on $procdff$3671 ($dff) from module picorv32 (D = $procmux$2824_Y, Q = \instr_sltu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4192 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1072$320_Y, Q = \instr_sltu).
Adding SRST signal on $procdff$3670 ($dff) from module picorv32 (D = $procmux$2828_Y, Q = \instr_slt, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4194 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1071$316_Y, Q = \instr_slt).
Adding SRST signal on $procdff$3669 ($dff) from module picorv32 (D = $procmux$2832_Y, Q = \instr_sll, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4196 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1070$312_Y, Q = \instr_sll).
Adding SRST signal on $procdff$3668 ($dff) from module picorv32 (D = $procmux$2836_Y, Q = \instr_sub, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4198 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1069$308_Y, Q = \instr_sub).
Adding SRST signal on $procdff$3667 ($dff) from module picorv32 (D = $procmux$2840_Y, Q = \instr_add, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4200 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1068$304_Y, Q = \instr_add).
Adding EN signal on $procdff$3666 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1066$300_Y, Q = \instr_srai).
Adding EN signal on $procdff$3665 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1065$296_Y, Q = \instr_srli).
Adding EN signal on $procdff$3664 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1064$292_Y, Q = \instr_slli).
Adding SRST signal on $procdff$3663 ($dff) from module picorv32 (D = $procmux$2850_Y, Q = \instr_andi, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4205 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1062$288_Y, Q = \instr_andi).
Adding SRST signal on $procdff$3662 ($dff) from module picorv32 (D = $procmux$2854_Y, Q = \instr_ori, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4207 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1061$286_Y, Q = \instr_ori).
Adding SRST signal on $procdff$3661 ($dff) from module picorv32 (D = $procmux$2858_Y, Q = \instr_xori, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4209 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1060$284_Y, Q = \instr_xori).
Adding SRST signal on $procdff$3660 ($dff) from module picorv32 (D = $procmux$2862_Y, Q = \instr_sltiu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4211 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1059$282_Y, Q = \instr_sltiu).
Adding SRST signal on $procdff$3659 ($dff) from module picorv32 (D = $procmux$2866_Y, Q = \instr_slti, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4213 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1058$280_Y, Q = \instr_slti).
Adding SRST signal on $procdff$3658 ($dff) from module picorv32 (D = $procmux$2870_Y, Q = \instr_addi, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4215 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1057$278_Y, Q = \instr_addi).
Adding EN signal on $procdff$3657 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1055$276_Y, Q = \instr_sw).
Adding EN signal on $procdff$3656 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1054$274_Y, Q = \instr_sh).
Adding EN signal on $procdff$3655 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1053$272_Y, Q = \instr_sb).
Adding EN signal on $procdff$3654 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1051$270_Y, Q = \instr_lhu).
Adding EN signal on $procdff$3653 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1050$268_Y, Q = \instr_lbu).
Adding EN signal on $procdff$3652 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1049$266_Y, Q = \instr_lw).
Adding EN signal on $procdff$3651 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1048$264_Y, Q = \instr_lh).
Adding EN signal on $procdff$3650 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:1047$262_Y, Q = \instr_lb).
Adding SRST signal on $procdff$3649 ($dff) from module picorv32 (D = $procmux$2890_Y, Q = \instr_bgeu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4225 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1045$260_Y, Q = \instr_bgeu).
Adding SRST signal on $procdff$3648 ($dff) from module picorv32 (D = $procmux$2894_Y, Q = \instr_bltu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4227 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1044$258_Y, Q = \instr_bltu).
Adding SRST signal on $procdff$3647 ($dff) from module picorv32 (D = $procmux$2898_Y, Q = \instr_bge, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4229 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1043$256_Y, Q = \instr_bge).
Adding SRST signal on $procdff$3646 ($dff) from module picorv32 (D = $procmux$2902_Y, Q = \instr_blt, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4231 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1042$254_Y, Q = \instr_blt).
Adding SRST signal on $procdff$3645 ($dff) from module picorv32 (D = $procmux$2906_Y, Q = \instr_bne, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4233 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1041$252_Y, Q = \instr_bne).
Adding SRST signal on $procdff$3644 ($dff) from module picorv32 (D = $procmux$2910_Y, Q = \instr_beq, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4235 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1040$250_Y, Q = \instr_beq).
Adding EN signal on $procdff$3643 ($dff) from module picorv32 (D = $logic_and$src/picorv32.v:870$182_Y, Q = \instr_jalr).
Adding EN signal on $procdff$3642 ($dff) from module picorv32 (D = $eq$src/picorv32.v:869$179_Y, Q = \instr_jal).
Adding EN signal on $procdff$3641 ($dff) from module picorv32 (D = $eq$src/picorv32.v:868$178_Y, Q = \instr_auipc).
Adding EN signal on $procdff$3640 ($dff) from module picorv32 (D = $eq$src/picorv32.v:867$177_Y, Q = \instr_lui).
Adding EN signal on $procdff$3639 ($dff) from module picorv32 (D = 32'x, Q = \pcpi_insn).
Adding EN signal on $procdff$3626 ($dff) from module picorv32 (D = $procmux$1568_Y, Q = \latched_rd).
Adding SRST signal on $procdff$3625 ($dff) from module picorv32 (D = $procmux$1594_Y, Q = \latched_is_lb, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4249 ($sdff) from module picorv32 (D = $procmux$1594_Y, Q = \latched_is_lb).
Adding SRST signal on $procdff$3624 ($dff) from module picorv32 (D = $procmux$1607_Y, Q = \latched_is_lh, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4259 ($sdff) from module picorv32 (D = $procmux$1607_Y, Q = \latched_is_lh).
Adding SRST signal on $procdff$3623 ($dff) from module picorv32 (D = $procmux$1620_Y, Q = \latched_is_lu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4269 ($sdff) from module picorv32 (D = $procmux$1620_Y, Q = \latched_is_lu).
Adding EN signal on $procdff$3621 ($dff) from module picorv32 (D = \compressed_instr, Q = \latched_compr).
Adding SRST signal on $procdff$3620 ($dff) from module picorv32 (D = $procmux$1665_Y, Q = \latched_branch, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4282 ($sdff) from module picorv32 (D = $procmux$1665_Y, Q = \latched_branch).
Adding SRST signal on $procdff$3619 ($dff) from module picorv32 (D = $procmux$1701_Y, Q = \latched_stalu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4286 ($sdff) from module picorv32 (D = $procmux$1701_Y, Q = \latched_stalu).
Adding SRST signal on $procdff$3618 ($dff) from module picorv32 (D = $procmux$1708_Y, Q = \latched_store, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4294 ($sdff) from module picorv32 (D = $procmux$1708_Y, Q = \latched_store).
Adding SRST signal on $procdff$3607 ($dff) from module picorv32 (D = $procmux$1332_Y, Q = \decoder_pseudo_trigger, rval = 1'0).
Adding SRST signal on $procdff$3604 ($dff) from module picorv32 (D = $procmux$1972_Y, Q = \mem_do_wdata, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4305 ($sdff) from module picorv32 (D = 1'0, Q = \mem_do_wdata).
Adding SRST signal on $procdff$3603 ($dff) from module picorv32 (D = $procmux$1976_Y, Q = \mem_do_rdata, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4307 ($sdff) from module picorv32 (D = 1'0, Q = \mem_do_rdata).
Adding SRST signal on $procdff$3602 ($dff) from module picorv32 (D = $procmux$2047_Y, Q = \mem_do_rinst, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4309 ($sdff) from module picorv32 (D = $procmux$2047_Y, Q = \mem_do_rinst).
Adding SRST signal on $procdff$3601 ($dff) from module picorv32 (D = $procmux$2072_Y, Q = \mem_do_prefetch, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4323 ($sdff) from module picorv32 (D = $logic_and$src/picorv32.v:1573$567_Y, Q = \mem_do_prefetch).
Adding EN signal on $procdff$3592 ($dff) from module picorv32 (D = $procmux$2195_Y, Q = \reg_op2).
Adding EN signal on $procdff$3591 ($dff) from module picorv32 (D = $procmux$2218_Y [31], Q = \reg_op1 [31]).
Adding EN signal on $procdff$3591 ($dff) from module picorv32 (D = $procmux$2218_Y [30:0], Q = \reg_op1 [30:0]).
Adding SRST signal on $procdff$3590 ($dff) from module picorv32 (D = $procmux$2282_Y, Q = \reg_next_pc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4368 ($sdff) from module picorv32 (D = $procmux$2271_Y, Q = \reg_next_pc).
Adding SRST signal on $procdff$3589 ($dff) from module picorv32 (D = $procmux$2294_Y, Q = \reg_pc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4370 ($sdff) from module picorv32 (D = $3\current_pc[31:0], Q = \reg_pc).
Adding SRST signal on $procdff$3588 ($dff) from module picorv32 (D = $procmux$2314_Y, Q = \count_instr, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$4372 ($sdff) from module picorv32 (D = $add$src/picorv32.v:1564$563_Y, Q = \count_instr).
Adding SRST signal on $procdff$3587 ($dff) from module picorv32 (D = $add$src/picorv32.v:1433$510_Y, Q = \count_cycle, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $procdff$3584 ($dff) from module picorv32 (D = 0, Q = \eoi).
Adding EN signal on $procdff$3583 ($dff) from module picorv32 (D = 1'0, Q = \pcpi_valid).
Adding SRST signal on $procdff$3582 ($dff) from module picorv32 (D = $procmux$1550_Y, Q = \trap, rval = 1'0).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4378 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$4377 ($dffe) from module picorv32.
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 1 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 2 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 3 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 4 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 5 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 6 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 7 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 8 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 9 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 10 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 11 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 12 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 13 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 14 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 15 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 16 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 17 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 18 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 19 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 20 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 21 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 22 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 23 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 24 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 25 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 26 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 27 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 28 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 29 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 30 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 31 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4175 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4174 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4173 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4172 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4171 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4170 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4165 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4164 ($dffe) from module picorv32.

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 153 unused cells and 175 unused wires.
<suppressed ~154 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~17 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~175 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4279 ($dffe) from module picorv32.

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 1 unused cells and 26 unused wires.
<suppressed ~2 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~173 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.8.23. Rerunning OPT passes. (Maybe there is more to do..)

3.8.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~173 debug messages>

3.8.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.8.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.8.27. Executing OPT_DFF pass (perform DFF optimizations).

3.8.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.8.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.8.30. Finished fast OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 9) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3937 ($eq).
Removed top 3 bits (of 4) from port A of cell picorv32.$shl$src/picorv32.v:419$99 ($shl).
Removed top 30 bits (of 32) from mux cell picorv32.$ternary$src/picorv32.v:617$158 ($mux).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:867$177 ($eq).
Removed top 2 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:868$178 ($eq).
Removed top 5 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:875$192 ($eq).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:876$193 ($eq).
Removed top 2 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:877$194 ($eq).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:878$195 ($eq).
Removed top 2 bits (of 3) from port B of cell picorv32.$eq$src/picorv32.v:1041$251 ($eq).
Removed top 1 bits (of 3) from port B of cell picorv32.$eq$src/picorv32.v:1049$265 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3861 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3865 ($eq).
Removed top 1 bits (of 3) from port B of cell picorv32.$eq$src/picorv32.v:1059$281 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3871 ($eq).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:1066$299 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3920 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3878 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3882 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3887 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3891 ($eq).
Removed top 9 bits (of 10) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3895 ($eq).
Removed top 4 bits (of 12) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3899 ($eq).
Removed top 1 bits (of 2) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4256 ($ne).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3932 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$eq$src/picorv32.v:1088$375 ($eq).
Removed top 5 bits (of 9) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3912 ($eq).
Removed top 4 bits (of 11) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3916 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3924 ($eq).
Removed top 29 bits (of 32) from port B of cell picorv32.$add$src/picorv32.v:1317$475 ($add).
Removed top 31 bits (of 32) from port B of cell picorv32.$add$src/picorv32.v:1433$510 ($add).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3794 ($eq).
Removed top 29 bits (of 32) from port B of cell picorv32.$add$src/picorv32.v:1560$562 ($add).
Removed top 31 bits (of 32) from port B of cell picorv32.$add$src/picorv32.v:1564$563 ($add).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3928 ($eq).
Removed top 29 bits (of 32) from port B of cell picorv32.$ge$src/picorv32.v:1835$615 ($ge).
Removed top 29 bits (of 32) from port B of cell picorv32.$sub$src/picorv32.v:1842$623 ($sub).
Removed top 27 bits (of 32) from port Y of cell picorv32.$sub$src/picorv32.v:1842$623 ($sub).
Removed top 4 bits (of 11) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3941 ($eq).
Removed top 31 bits (of 32) from port B of cell picorv32.$sub$src/picorv32.v:1850$630 ($sub).
Removed top 27 bits (of 32) from port Y of cell picorv32.$sub$src/picorv32.v:1850$630 ($sub).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3857 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3790 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3853 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$4091 ($eq).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4314 ($ne).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3970 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3966 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3962 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3849 ($eq).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3978 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3974 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3982 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4110 ($ne).
Removed top 2 bits (of 3) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3798 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3845 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4361 ($ne).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3802 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3841 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3806 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3837 ($eq).
Removed top 1 bits (of 3) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3808 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3833 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3829 ($eq).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3815 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3817 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3825 ($eq).
Removed top 1 bits (of 2) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4346 ($ne).
Removed top 2 bits (of 3) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4342 ($ne).
Removed top 1 bits (of 2) from port B of cell picorv32.$procmux$3252_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell picorv32.$procmux$3539_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4320 ($ne).
Removed top 11 bits (of 31) from FF cell picorv32.$auto$ff.cc:266:slice$4380 ($dffe).
Removed top 1 bits (of 2) from port B of cell picorv32.$auto$opt_dff.cc:248:make_patterns_logic$4146 ($ne).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3821 ($eq).
Removed top 27 bits (of 32) from wire picorv32.$sub$src/picorv32.v:1842$623_Y.
Removed top 27 bits (of 32) from wire picorv32.$sub$src/picorv32.v:1850$630_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module picorv32:
  creating $macc model for $add$src/picorv32.v:1240$679 ($add).
  creating $macc model for $add$src/picorv32.v:1317$475 ($add).
  creating $macc model for $add$src/picorv32.v:1433$510 ($add).
  creating $macc model for $add$src/picorv32.v:1560$562 ($add).
  creating $macc model for $add$src/picorv32.v:1564$563 ($add).
  creating $macc model for $add$src/picorv32.v:1569$564 ($add).
  creating $macc model for $add$src/picorv32.v:1806$609 ($add).
  creating $macc model for $add$src/picorv32.v:1869$634 ($add).
  creating $macc model for $sub$src/picorv32.v:1240$678 ($sub).
  creating $macc model for $sub$src/picorv32.v:1842$623 ($sub).
  creating $macc model for $sub$src/picorv32.v:1850$630 ($sub).
  creating $alu model for $macc $sub$src/picorv32.v:1850$630.
  creating $alu model for $macc $sub$src/picorv32.v:1842$623.
  creating $alu model for $macc $sub$src/picorv32.v:1240$678.
  creating $alu model for $macc $add$src/picorv32.v:1869$634.
  creating $alu model for $macc $add$src/picorv32.v:1806$609.
  creating $alu model for $macc $add$src/picorv32.v:1569$564.
  creating $alu model for $macc $add$src/picorv32.v:1564$563.
  creating $alu model for $macc $add$src/picorv32.v:1560$562.
  creating $alu model for $macc $add$src/picorv32.v:1433$510.
  creating $alu model for $macc $add$src/picorv32.v:1317$475.
  creating $alu model for $macc $add$src/picorv32.v:1240$679.
  creating $alu model for $ge$src/picorv32.v:1835$615 ($ge): merged with $sub$src/picorv32.v:1842$623.
  creating $alu model for $lt$src/picorv32.v:1242$682 ($lt): new $alu
  creating $alu model for $lt$src/picorv32.v:1243$683 ($lt): merged with $sub$src/picorv32.v:1240$678.
  creating $alu model for $eq$src/picorv32.v:1241$681 ($eq): merged with $sub$src/picorv32.v:1240$678.
  creating $alu cell for $add$src/picorv32.v:1240$679: $auto$alumacc.cc:495:replace_alu$4384
  creating $alu cell for $add$src/picorv32.v:1317$475: $auto$alumacc.cc:495:replace_alu$4387
  creating $alu cell for $add$src/picorv32.v:1433$510: $auto$alumacc.cc:495:replace_alu$4390
  creating $alu cell for $add$src/picorv32.v:1560$562: $auto$alumacc.cc:495:replace_alu$4393
  creating $alu cell for $add$src/picorv32.v:1564$563: $auto$alumacc.cc:495:replace_alu$4396
  creating $alu cell for $add$src/picorv32.v:1569$564: $auto$alumacc.cc:495:replace_alu$4399
  creating $alu cell for $add$src/picorv32.v:1806$609: $auto$alumacc.cc:495:replace_alu$4402
  creating $alu cell for $add$src/picorv32.v:1869$634: $auto$alumacc.cc:495:replace_alu$4405
  creating $alu cell for $lt$src/picorv32.v:1242$682: $auto$alumacc.cc:495:replace_alu$4408
  creating $alu cell for $sub$src/picorv32.v:1240$678, $lt$src/picorv32.v:1243$683, $eq$src/picorv32.v:1241$681: $auto$alumacc.cc:495:replace_alu$4415
  creating $alu cell for $sub$src/picorv32.v:1842$623, $ge$src/picorv32.v:1835$615: $auto$alumacc.cc:495:replace_alu$4422
  creating $alu cell for $sub$src/picorv32.v:1850$630: $auto$alumacc.cc:495:replace_alu$4435
  created 12 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module picorv32 that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\cpuregs$src/picorv32.v:1353$497 ($memrd):
    Found 2 activation_patterns using ctrl signal { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3749 $auto$opt_reduce.cc:137:opt_pmux$3745 \cpu_state [2] $reduce_bool$src/picorv32.v:1353$498_Y \is_slli_srli_srai \resetn }.
    Found 1 candidates: $memrd$\cpuregs$src/picorv32.v:1352$494
    Analyzing resource sharing with $memrd$\cpuregs$src/picorv32.v:1352$494 ($memrd):
      Found 1 activation_patterns using ctrl signal { $auto$opt_reduce.cc:137:opt_pmux$3759 \cpu_state [2] $reduce_bool$src/picorv32.v:1352$495_Y \is_lui_auipc_jal }.
      Activation pattern for cell $memrd$\cpuregs$src/picorv32.v:1353$497: { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3749 $reduce_bool$src/picorv32.v:1353$498_Y } = 3'001
      Activation pattern for cell $memrd$\cpuregs$src/picorv32.v:1353$497: { $auto$opt_reduce.cc:137:opt_pmux$3745 \cpu_state [2] $reduce_bool$src/picorv32.v:1353$498_Y \is_slli_srli_srai \resetn } = 5'01101
      Activation pattern for cell $memrd$\cpuregs$src/picorv32.v:1352$494: { $auto$opt_reduce.cc:137:opt_pmux$3759 \cpu_state [2] $reduce_bool$src/picorv32.v:1352$495_Y \is_lui_auipc_jal } = 4'0110
      Size of SAT problem: 9 cells, 146 variables, 336 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3759 $auto$opt_reduce.cc:137:opt_pmux$3749 $auto$opt_reduce.cc:137:opt_pmux$3745 \cpu_state [2] $reduce_bool$src/picorv32.v:1353$498_Y $reduce_bool$src/picorv32.v:1352$495_Y \is_slli_srli_srai \is_lui_auipc_jal \resetn } = 10'0000111000
  Analyzing resource sharing options for $memrd$\cpuregs$src/picorv32.v:1352$494 ($memrd):
    Found 1 activation_patterns using ctrl signal { $auto$opt_reduce.cc:137:opt_pmux$3759 \cpu_state [2] $reduce_bool$src/picorv32.v:1352$495_Y \is_lui_auipc_jal }.
    No candidates found.

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~173 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~173 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.14.16. Finished fast OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing picorv32.cpuregs write port 0.

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\cpuregs'[0] in module `\picorv32': no output FF found.
Checking read port `\cpuregs'[1] in module `\picorv32': no output FF found.
Checking read port address `\cpuregs'[0] in module `\picorv32': merged address FF to cell.
Checking read port address `\cpuregs'[1] in module `\picorv32': merged address FF to cell.

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory picorv32.cpuregs by address:

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~100 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$4138 ($dffe) from module picorv32 (D = $procmux$3300_Y, Q = \mem_valid, rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$4104 ($dffe) from module picorv32 (D = $procmux$3242_Y, Q = \mem_state, rval = 2'00).
Adding SRST signal on $auto$ff.cc:266:slice$4242 ($dffe) from module picorv32 (D = \decoded_rd, Q = \latched_rd, rval = 5'00000).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 15 unused cells and 62 unused wires.
<suppressed ~19 debug messages>

3.17.5. Rerunning OPT passes. (Removed registers in this run.)

3.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

3.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.17.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$3594 ($dff) from module picorv32 (D = $0\reg_sh[4:0] [1:0], Q = \reg_sh [1:0]).

3.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.17.10. Rerunning OPT passes. (Removed registers in this run.)

3.17.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.17.13. Executing OPT_DFF pass (perform DFF optimizations).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.17.15. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \cpuregs in module \picorv32:
  created 32 $dff cells and 0 static cells of width 32.
Extracted addr FF from read port 0 of picorv32.cpuregs: $\cpuregs$rdreg[0]
Extracted addr FF from read port 1 of picorv32.cpuregs: $\cpuregs$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~10 debug messages>

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~348 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    Consolidated identical input bits for $pmux cell $procmux$1458:
      Old ports: A=\mem_rdata_word, B={ \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15:0] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7:0] }, Y=$procmux$1458_Y
      New ports: A=\mem_rdata_word [31:8], B={ \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15:7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] }, Y=$procmux$1458_Y [31:8]
      New connections: $procmux$1458_Y [7:0] = \mem_rdata_word [7:0]
    New ctrl vector for $pmux cell $procmux$1708: { \cpu_state [3] $auto$opt_reduce.cc:137:opt_pmux$4952 }
    New ctrl vector for $pmux cell $procmux$2218: { \cpu_state [4] $auto$opt_reduce.cc:137:opt_pmux$4954 }
    Consolidated identical input bits for $mux cell $procmux$2269:
      Old ports: A={ $add$src/picorv32.v:1560$562_Y [31:2] $3\current_pc[31:0] [1:0] }, B={ $add$src/picorv32.v:1569$564_Y [31:1] $3\current_pc[31:0] [0] }, Y=$procmux$2269_Y
      New ports: A={ $add$src/picorv32.v:1560$562_Y [31:2] $3\current_pc[31:0] [1] }, B=$add$src/picorv32.v:1569$564_Y [31:1], Y=$procmux$2269_Y [31:1]
      New connections: $procmux$2269_Y [0] = $3\current_pc[31:0] [0]
    New ctrl vector for $pmux cell $procmux$3242: { $procmux$3252_CMP $auto$opt_reduce.cc:137:opt_pmux$4956 }
    Consolidated identical input bits for $pmux cell $procmux$3536:
      Old ports: A={ 24'000000000000000000000000 \mem_rdata [7:0] }, B={ 24'000000000000000000000000 \mem_rdata [15:8] 24'000000000000000000000000 \mem_rdata [23:16] 24'000000000000000000000000 \mem_rdata [31:24] }, Y=$3\mem_rdata_word[31:0]
      New ports: A=\mem_rdata [7:0], B={ \mem_rdata [15:8] \mem_rdata [23:16] \mem_rdata [31:24] }, Y=$3\mem_rdata_word[31:0] [7:0]
      New connections: $3\mem_rdata_word[31:0] [31:8] = 24'000000000000000000000000
    Consolidated identical input bits for $mux cell $procmux$3545:
      Old ports: A={ 16'0000000000000000 \mem_rdata [15:0] }, B={ 16'0000000000000000 \mem_rdata [31:16] }, Y=$2\mem_rdata_word[31:0]
      New ports: A=\mem_rdata [15:0], B=\mem_rdata [31:16], Y=$2\mem_rdata_word[31:0] [15:0]
      New connections: $2\mem_rdata_word[31:0] [31:16] = 16'0000000000000000
    Consolidated identical input bits for $pmux cell $procmux$3561:
      Old ports: A=\reg_op2, B={ \reg_op2 [15:0] \reg_op2 [15:0] \reg_op2 [7:0] \reg_op2 [7:0] \reg_op2 [7:0] \reg_op2 [7:0] }, Y=\mem_la_wdata
      New ports: A=\reg_op2 [31:8], B={ \reg_op2 [15:0] \reg_op2 [15:0] \reg_op2 [7:0] \reg_op2 [7:0] }, Y=\mem_la_wdata [31:8]
      New connections: \mem_la_wdata [7:0] = \reg_op2 [7:0]
    Consolidated identical input bits for $mux cell $ternary$src/picorv32.v:382$83:
      Old ports: A={ \reg_op1 [31:2] 2'00 }, B={ \next_pc [31:2] 2'00 }, Y=\mem_la_addr
      New ports: A=\reg_op1 [31:2], B=\next_pc [31:2], Y=\mem_la_addr [31:2]
      New connections: \mem_la_addr [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$src/picorv32.v:411$98:
      Old ports: A=4'0011, B=4'1100, Y=$ternary$src/picorv32.v:411$98_Y
      New ports: A=2'01, B=2'10, Y={ $ternary$src/picorv32.v:411$98_Y [2] $ternary$src/picorv32.v:411$98_Y [0] }
      New connections: { $ternary$src/picorv32.v:411$98_Y [3] $ternary$src/picorv32.v:411$98_Y [1] } = { $ternary$src/picorv32.v:411$98_Y [2] $ternary$src/picorv32.v:411$98_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$src/picorv32.v:617$158:
      Old ports: A=2'11, B=2'00, Y=$procmux$3248_Y
      New ports: A=1'1, B=1'0, Y=$procmux$3248_Y [0]
      New connections: $procmux$3248_Y [1] = $procmux$3248_Y [0]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$4951: { \cpu_state [6] \cpu_state [4] \cpu_state [2] }
  Optimizing cells in module \picorv32.
    Consolidated identical input bits for $mux cell $procmux$2271:
      Old ports: A=$3\current_pc[31:0], B=$procmux$2269_Y, Y=$procmux$2271_Y
      New ports: A=$3\current_pc[31:0] [31:1], B=$procmux$2269_Y [31:1], Y=$procmux$2271_Y [31:1]
      New connections: $procmux$2271_Y [0] = $3\current_pc[31:0] [0]
  Optimizing cells in module \picorv32.
Performed a total of 13 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 102 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~345 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\cpuregs[9]$4475 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[9]).
Adding EN signal on $memory\cpuregs[8]$4473 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[8]).
Adding EN signal on $memory\cpuregs[7]$4471 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[7]).
Adding EN signal on $memory\cpuregs[6]$4469 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[6]).
Adding EN signal on $memory\cpuregs[5]$4467 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[5]).
Adding EN signal on $memory\cpuregs[4]$4465 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[4]).
Adding EN signal on $memory\cpuregs[3]$4463 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[3]).
Adding EN signal on $memory\cpuregs[31]$4519 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[31]).
Adding EN signal on $memory\cpuregs[30]$4517 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[30]).
Adding EN signal on $memory\cpuregs[2]$4461 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[2]).
Adding EN signal on $memory\cpuregs[29]$4515 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[29]).
Adding EN signal on $memory\cpuregs[28]$4513 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[28]).
Adding EN signal on $memory\cpuregs[27]$4511 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[27]).
Adding EN signal on $memory\cpuregs[26]$4509 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[26]).
Adding EN signal on $memory\cpuregs[25]$4507 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[25]).
Adding EN signal on $memory\cpuregs[24]$4505 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[24]).
Adding EN signal on $memory\cpuregs[23]$4503 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[23]).
Adding EN signal on $memory\cpuregs[22]$4501 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[22]).
Adding EN signal on $memory\cpuregs[21]$4499 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[21]).
Adding EN signal on $memory\cpuregs[20]$4497 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[20]).
Adding EN signal on $memory\cpuregs[1]$4459 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[1]).
Adding EN signal on $memory\cpuregs[19]$4495 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[19]).
Adding EN signal on $memory\cpuregs[18]$4493 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[18]).
Adding EN signal on $memory\cpuregs[17]$4491 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[17]).
Adding EN signal on $memory\cpuregs[16]$4489 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[16]).
Adding EN signal on $memory\cpuregs[15]$4487 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[15]).
Adding EN signal on $memory\cpuregs[14]$4485 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[14]).
Adding EN signal on $memory\cpuregs[13]$4483 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[13]).
Adding EN signal on $memory\cpuregs[12]$4481 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[12]).
Adding EN signal on $memory\cpuregs[11]$4479 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[11]).
Adding EN signal on $memory\cpuregs[10]$4477 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[10]).
Adding EN signal on $memory\cpuregs[0]$4457 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4125 ($dffe) from module picorv32.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$4125 ($dffe) from module picorv32.

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~217 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.19.26. Finished fast OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Generating RTLIL representation for module `\$connect'.
Generating RTLIL representation for module `\$input_port'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$cc1e387d9d5ac1d3f6e6bed180038d9c0ac48d0c\_90_pmux for cells of type $pmux.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$b098bc6f249c0ac91c4d6e19d54b23c285914115\_90_pmux for cells of type $pmux.
Using template $paramod$59b03ae2620a41577de8da5f5c97b2919e82362b\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
No more expansions possible.
<suppressed ~4204 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~2134 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~3504 debug messages>
Removed a total of 1168 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$11899 ($_SDFFE_PN0P_) from module picorv32 (D = 1'0, Q = \reg_next_pc [0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$19753 ($_SDFFE_PN0P_) from module picorv32.

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 307 unused cells and 2716 unused wires.
<suppressed ~308 debug messages>

3.21.5. Rerunning OPT passes. (Removed registers in this run.)

3.21.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~7 debug messages>

3.21.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.21.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$12258 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [31], Q = \decoded_imm [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12257 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [30], Q = \decoded_imm [30], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12256 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [29], Q = \decoded_imm [29], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12255 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [28], Q = \decoded_imm [28], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12254 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [27], Q = \decoded_imm [27], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12253 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [26], Q = \decoded_imm [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12252 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [25], Q = \decoded_imm [25], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12251 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [24], Q = \decoded_imm [24], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12250 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [23], Q = \decoded_imm [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12249 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [22], Q = \decoded_imm [22], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12248 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [21], Q = \decoded_imm [21], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12247 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [20], Q = \decoded_imm [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12246 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [19], Q = \decoded_imm [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12245 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [18], Q = \decoded_imm [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12244 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [17], Q = \decoded_imm [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12243 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [16], Q = \decoded_imm [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12242 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [15], Q = \decoded_imm [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12241 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [14], Q = \decoded_imm [14], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12240 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [13], Q = \decoded_imm [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12239 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [12], Q = \decoded_imm [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12238 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [11], Q = \decoded_imm [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12237 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [10], Q = \decoded_imm [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12236 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [9], Q = \decoded_imm [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12235 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [8], Q = \decoded_imm [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12234 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [7], Q = \decoded_imm [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12233 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [6], Q = \decoded_imm [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12232 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [5], Q = \decoded_imm [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12231 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [4], Q = \decoded_imm [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12230 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [3], Q = \decoded_imm [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12229 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [2], Q = \decoded_imm [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12228 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [1], Q = \decoded_imm [1], rval = 1'0).

3.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 31 unused cells and 2 unused wires.
<suppressed ~32 debug messages>

3.21.10. Rerunning OPT passes. (Removed registers in this run.)

3.21.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

3.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

3.21.13. Executing OPT_DFF pass (perform DFF optimizations).

3.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

3.21.15. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\picorv32' to `<abc-temp-dir>/input.blif'..
Replacing 3 occurrences of constant undef bits with constant zero bits

3.22.1.1. Executed ABC.
Extracted 6552 gates and 8118 wires to a netlist network with 1563 inputs and 622 outputs.
Running ABC script: <abc-temp-dir>/abc.script
ABC: UC Berkeley, ABC 1.01 (compiled Sep 19 2025 17:16:22)
ABC: abc 01> set abcout /dev/stdout
ABC: abc 01> empty
ABC: abc 01> source <abc-temp-dir>/abc.script
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library /tmp/yosys-abc-H3Qi6H/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 
ABC: abc 04> echo "ABC_DONE"

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      404
ABC RESULTS:            ANDNOT cells:     1137
ABC RESULTS:               MUX cells:     2709
ABC RESULTS:              NAND cells:      210
ABC RESULTS:               NOR cells:      214
ABC RESULTS:               NOT cells:      131
ABC RESULTS:                OR cells:     1022
ABC RESULTS:             ORNOT cells:      151
ABC RESULTS:              XNOR cells:      101
ABC RESULTS:               XOR cells:      370
ABC RESULTS:        internal signals:     5933
ABC RESULTS:           input signals:     1563
ABC RESULTS:          output signals:      622
Removing temp directory.
Removing global temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1216 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 13 unused cells and 3772 unused wires.
<suppressed ~27 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `picorv32'. Setting top module to picorv32.

3.24.1. Analyzing design hierarchy..
Top module:  \picorv32

3.24.2. Analyzing design hierarchy..
Top module:  \picorv32
Removed 0 unused modules.

3.25. Printing statistics.

=== picorv32 ===

        +----------Local Count, excluding submodules.
        | 
     6212 wires
     8785 wire bits
      180 public wires
     2305 public wire bits
       27 ports
      409 port bits
     8027 cells
     1137   $_ANDNOT_
      404   $_AND_
     1240   $_DFFE_PP_
       91   $_DFF_P_
     2709   $_MUX_
      210   $_NAND_
      211   $_NOR_
      118   $_NOT_
      151   $_ORNOT_
     1020   $_OR_
       34   $_SDFFCE_PN0P_
        6   $_SDFFCE_PP0P_
        1   $_SDFFE_PN0N_
      154   $_SDFFE_PN0P_
        1   $_SDFFE_PP0P_
        3   $_SDFFE_PP1P_
       66   $_SDFF_PN0_
        1   $_SDFF_PP0_
      100   $_XNOR_
      370   $_XOR_

3.26. Executing CHECK pass (checking for obvious problems).
Checking module picorv32...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_1 (noninv, pins=3, area=20.02) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtn_1 (noninv, pins=4, area=25.02) is a direct match for cell type $_DFF_NN0_.
  cell sky130_fd_sc_hd__dfrtp_1 (noninv, pins=4, area=25.02) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__edfxtp_1 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFFE_PP_.
  cell sky130_fd_sc_hd__dfbbn_1 (noninv, pins=6, area=32.53) is a direct match for cell type $_DFFSR_NNN_.
  cell sky130_fd_sc_hd__dfbbp_1 (noninv, pins=6, area=32.53) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \sky130_fd_sc_hd__dfrtn_1 _DFF_NN0_ (.CLK_N( C), .D( D), .Q( Q), .RESET_B( R));
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    \sky130_fd_sc_hd__edfxtp_1 _DFFE_PP_ (.CLK( C), .D( D), .DE( E), .Q( Q));
    \sky130_fd_sc_hd__dfbbn_1 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \sky130_fd_sc_hd__dfbbp_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
<suppressed ~24 debug messages>
Mapping DFF cells in module `\picorv32':
  mapped 1280 $_DFFE_PP_ cells to \sky130_fd_sc_hd__edfxtp_1 cells.
  mapped 317 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_1 cells.

5. Executing ABC pass (technology mapping using ABC).

5.1. Extracting gate netlist of module `\picorv32' to `<abc-temp-dir>/input.blif'..

5.1.1. Executed ABC.
Extracted 6855 gates and 8425 wires to a netlist network with 1568 inputs and 617 outputs.
Running ABC script: <abc-temp-dir>/abc.script
ABC: UC Berkeley, ABC 1.01 (compiled Sep 19 2025 17:16:22)
ABC: abc 01> set abcout /dev/stdout
ABC: abc 01> empty
ABC: abc 01> source <abc-temp-dir>/abc.script
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/ank/.ciel/ciel/sky130/versions/a80ed405766c5d4f21c8bfca84552a7478fe75b2/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__diode_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-stat+ strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 
ABC: e cell "sky130_fd_sc_hd__einvn_0".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_8".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_bleeder_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__lpflow_inputisolatch_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/ank/.ciel/ciel/sky130/versions/a80ed405766c5d4f21c8bfca84552a7478fe75b2/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib" has 334 cells (94 skipped: 63 seq; 13 tri-state; 18 no func; 0 dont_use; 0 with 2 outputs; 0 with 3+ outputs).  Time =     0.10 sec
ABC: Memory =   19.85 MB. Time =     0.10 sec
ABC: Warning: Detected 9 multi-output cells (for example, "sky130_fd_sc_hd__fa_1").
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: abc 07> echo "ABC_DONE"

5.1.2. Re-integrating ABC results.
ABC RESULTS:          _const0_ cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_0 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_1 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a211oi_1 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__a21bo_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21boi_0 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a21o_1 cells:       48
ABC RESULTS:   sky130_fd_sc_hd__a21oi_1 cells:      403
ABC RESULTS:   sky130_fd_sc_hd__a221o_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a221oi_1 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__a222oi_1 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__a22o_1 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__a22oi_1 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a311oi_1 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a31o_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a31oi_1 cells:       60
ABC RESULTS:   sky130_fd_sc_hd__a32o_1 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a32oi_1 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a41o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41oi_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_0 cells:       74
ABC RESULTS:   sky130_fd_sc_hd__and3_1 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__and4_1 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and4b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:       97
ABC RESULTS:   sky130_fd_sc_hd__lpflow_inputiso1p_1 cells:       44
ABC RESULTS:   sky130_fd_sc_hd__lpflow_isobufsrc_1 cells:       66
ABC RESULTS:   sky130_fd_sc_hd__maj3_1 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       57
ABC RESULTS:   sky130_fd_sc_hd__mux2i_1 cells:       87
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      533
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:      552
ABC RESULTS:   sky130_fd_sc_hd__nand2b_1 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__nand3_1 cells:       69
ABC RESULTS:   sky130_fd_sc_hd__nand3b_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand4_1 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__nor2_1 cells:      528
ABC RESULTS:   sky130_fd_sc_hd__nor2b_1 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__nor3_1 cells:      115
ABC RESULTS:   sky130_fd_sc_hd__nor3b_1 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nor4_1 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__nor4b_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor4bb_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_1 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__o21a_1 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__o21ai_0 cells:      525
ABC RESULTS:   sky130_fd_sc_hd__o221a_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o221ai_1 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__o22a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_1 cells:       48
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311ai_0 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o31ai_1 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__o32a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32ai_1 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o41ai_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3_1 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__or3b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_1 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or4b_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xnor2_1 cells:      112
ABC RESULTS:   sky130_fd_sc_hd__xor2_1 cells:       44
ABC RESULTS:        internal signals:     6240
ABC RESULTS:           input signals:     1568
ABC RESULTS:          output signals:      617
Removing temp directory.
Removing global temp directory.

6. Executing Verilog backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Dumping module `\picorv32'.

7. Printing statistics.

=== picorv32 ===

        +----------Local Count, excluding submodules.
        |        +-Local Area, excluding submodules.
        |        | 
    12349        - wires
    14922        - wire bits
      180        - public wires
     2305        - public wire bits
       27        - ports
      409        - port bits
     5740 7.72E+04 cells
        1   11.261   sky130_fd_sc_hd__a2111o_1
        2   17.517   sky130_fd_sc_hd__a2111oi_0
       11   96.342   sky130_fd_sc_hd__a211o_1
       31  232.723   sky130_fd_sc_hd__a211oi_1
        2   20.019   sky130_fd_sc_hd__a21bo_1
       11   82.579   sky130_fd_sc_hd__a21boi_0
       48  360.346   sky130_fd_sc_hd__a21o_1
      403 2.02E+03   sky130_fd_sc_hd__a21oi_1
        5   50.048   sky130_fd_sc_hd__a221o_1
       22  192.685   sky130_fd_sc_hd__a221oi_1
       33  330.317   sky130_fd_sc_hd__a222oi_1
       28  245.235   sky130_fd_sc_hd__a22o_1
       52  390.374   sky130_fd_sc_hd__a22oi_1
        1    8.758   sky130_fd_sc_hd__a2bb2oi_1
        8   80.077   sky130_fd_sc_hd__a311o_1
       13  113.859   sky130_fd_sc_hd__a311oi_1
        8   70.067   sky130_fd_sc_hd__a31o_1
       60   375.36   sky130_fd_sc_hd__a31oi_1
       13  130.125   sky130_fd_sc_hd__a32o_1
       13  113.859   sky130_fd_sc_hd__a32oi_1
        1    10.01   sky130_fd_sc_hd__a41o_1
        4   35.034   sky130_fd_sc_hd__a41oi_1
       74  462.944   sky130_fd_sc_hd__and2_0
       29  181.424   sky130_fd_sc_hd__and3_1
       10   87.584   sky130_fd_sc_hd__and4_1
        1    10.01   sky130_fd_sc_hd__and4b_1
       97  364.099   sky130_fd_sc_hd__clkinv_1
      317 6.35E+03   sky130_fd_sc_hd__dfxtp_1
     1280 3.84E+04   sky130_fd_sc_hd__edfxtp_1
       44  275.264   sky130_fd_sc_hd__lpflow_inputiso1p_1
       66  412.896   sky130_fd_sc_hd__lpflow_isobufsrc_1
        9   90.086   sky130_fd_sc_hd__maj3_1
       57  641.866   sky130_fd_sc_hd__mux2_1
       87  870.835   sky130_fd_sc_hd__mux2i_1
      533  1.2E+04   sky130_fd_sc_hd__mux4_2
      552 2.07E+03   sky130_fd_sc_hd__nand2_1
       38  237.728   sky130_fd_sc_hd__nand2b_1
       69  345.331   sky130_fd_sc_hd__nand3_1
        5   37.536   sky130_fd_sc_hd__nand3b_1
       37  231.472   sky130_fd_sc_hd__nand4_1
      528 1.98E+03   sky130_fd_sc_hd__nor2_1
       21  131.376   sky130_fd_sc_hd__nor2b_1
      115  575.552   sky130_fd_sc_hd__nor3_1
       13   97.594   sky130_fd_sc_hd__nor3b_1
       32  200.192   sky130_fd_sc_hd__nor4_1
        2   17.517   sky130_fd_sc_hd__nor4b_1
        1    10.01   sky130_fd_sc_hd__nor4bb_1
        1    8.758   sky130_fd_sc_hd__o2111ai_1
       34  255.245   sky130_fd_sc_hd__o211ai_1
       37  277.766   sky130_fd_sc_hd__o21a_1
      525  2627.52   sky130_fd_sc_hd__o21ai_0
        4   45.043   sky130_fd_sc_hd__o221a_1
       53  464.195   sky130_fd_sc_hd__o221ai_1
        1    8.758   sky130_fd_sc_hd__o22a_1
       48  300.288   sky130_fd_sc_hd__o22ai_1
        2   17.517   sky130_fd_sc_hd__o2bb2ai_1
        3   30.029   sky130_fd_sc_hd__o311a_1
       10   87.584   sky130_fd_sc_hd__o311ai_0
       18   135.13   sky130_fd_sc_hd__o31ai_1
        1    10.01   sky130_fd_sc_hd__o32a_1
       10   87.584   sky130_fd_sc_hd__o32ai_1
        4   35.034   sky130_fd_sc_hd__o41ai_1
       35   218.96   sky130_fd_sc_hd__or3_1
        1    8.758   sky130_fd_sc_hd__or3b_1
        7    52.55   sky130_fd_sc_hd__or4_1
        3   30.029   sky130_fd_sc_hd__or4b_1
      112  980.941   sky130_fd_sc_hd__xnor2_1
       44   385.37   sky130_fd_sc_hd__xor2_1

   Chip area for module '\picorv32': 77172.764800
     of which used for sequential elements: 44782.950400 (58.03%)

8. Generating Graphviz representation of design.
Writing dot description to `/home/ank/.yosys_show.dot'.
Dumping module picorv32 to page 1.
Exec: { test -f '/home/ank/.yosys_show.dot.pid' && fuser -s '/home/ank/.yosys_show.dot.pid' 2> /dev/null; } || ( echo $$ >&3; exec xdot '/home/ank/.yosys_show.dot'; ) 3> '/home/ank/.yosys_show.dot.pid' &

End of script. Logfile hash: ef1198cbb4, CPU: user 2.61s system 0.06s, MEM: 64.30 MB peak
Yosys 0.57+148 (git sha1 259bd6fb3, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)
Time spent: 35% 2x abc (1 sec), 14% 39x opt_expr (0 sec), ...
